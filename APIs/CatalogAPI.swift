//
// CatalogAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CatalogAPI {
    /**
     BatchDeleteCatalogObjects
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchDeleteCatalogObjects(body: BatchDeleteCatalogObjectsRequest, completion: @escaping ((_ data: BatchDeleteCatalogObjectsResponse?,_ error: Error?) -> Void)) {
        batchDeleteCatalogObjectsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     BatchDeleteCatalogObjects
     - POST /v2/catalog/batch-delete
     - Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "deleted_object_ids" : [ "W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK" ],
  "deleted_at" : "2016-11-16T22:25:24.878Z"
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<BatchDeleteCatalogObjectsResponse> 
     */
    open class func batchDeleteCatalogObjectsWithRequestBuilder(body: BatchDeleteCatalogObjectsRequest) -> RequestBuilder<BatchDeleteCatalogObjectsResponse> {
        let path = "/v2/catalog/batch-delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchDeleteCatalogObjectsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     BatchRetrieveCatalogObjects
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchRetrieveCatalogObjects(body: BatchRetrieveCatalogObjectsRequest, completion: @escaping ((_ data: BatchRetrieveCatalogObjectsResponse?,_ error: Error?) -> Void)) {
        batchRetrieveCatalogObjectsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     BatchRetrieveCatalogObjects
     - POST /v2/catalog/batch-retrieve
     - Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "objects" : [ {
    "type" : "ITEM",
    "id" : "W62UWFY35CWMYGVWK6TWJDNI",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Tea",
      "description" : "Hot Leaf Juice",
      "category_id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
      "tax_ids" : [ "HURXQOOAIC4IZSI2BEXQRYFY" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "2TZFAOHWGG7PAK2QEXWYPZSP",
        "updated_at" : "2016-11-16T22:25:24.878Z",
        "version" : 1479335124878,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "W62UWFY35CWMYGVWK6TWJDNI",
          "name" : "Mug",
          "ordinal" : 0,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 150,
            "currency" : "USD"
          }
        }
      } ]
    }
  }, {
    "type" : "ITEM",
    "id" : "AA27W3M2GGTF3H6AVPNB77CK",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Coffee",
      "description" : "Hot Bean Juice",
      "category_id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
      "tax_ids" : [ "HURXQOOAIC4IZSI2BEXQRYFY" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "LBTYIHNHU52WOIHWT7SNRIYH",
        "updated_at" : "2016-11-16T22:25:24.878Z",
        "version" : 1479335124878,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "AA27W3M2GGTF3H6AVPNB77CK",
          "name" : "Regular",
          "ordinal" : 0,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 250,
            "currency" : "USD"
          }
        }
      }, {
        "type" : "ITEM_VARIATION",
        "id" : "PKYIC7HGGKW5CYVSCVDEIMHY",
        "updated_at" : "2016-11-16T22:25:24.878Z",
        "version" : 1479335124878,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "AA27W3M2GGTF3H6AVPNB77CK",
          "name" : "Large",
          "ordinal" : 1,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 350,
            "currency" : "USD"
          }
        }
      } ]
    }
  } ],
  "related_objects" : [ {
    "type" : "CATEGORY",
    "id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "category_data" : {
      "name" : "Beverages"
    }
  }, {
    "type" : "TAX",
    "id" : "HURXQOOAIC4IZSI2BEXQRYFY",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "tax_data" : {
      "name" : "Sales Tax",
      "calculation_phase" : "TAX_SUBTOTAL_PHASE",
      "inclusion_type" : "ADDITIVE",
      "percentage" : "5.0",
      "enabled" : true
    }
  } ]
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<BatchRetrieveCatalogObjectsResponse> 
     */
    open class func batchRetrieveCatalogObjectsWithRequestBuilder(body: BatchRetrieveCatalogObjectsRequest) -> RequestBuilder<BatchRetrieveCatalogObjectsResponse> {
        let path = "/v2/catalog/batch-retrieve"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchRetrieveCatalogObjectsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     BatchUpsertCatalogObjects
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUpsertCatalogObjects(body: BatchUpsertCatalogObjectsRequest, completion: @escaping ((_ data: BatchUpsertCatalogObjectsResponse?,_ error: Error?) -> Void)) {
        batchUpsertCatalogObjectsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     BatchUpsertCatalogObjects
     - POST /v2/catalog/batch-upsert
     - Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "objects" : [ {
    "type" : "ITEM",
    "id" : "ZSDZN34NAXDLC6D5ZQMNSOUM",
    "updated_at" : "2017-05-10T18:48:39.798Z",
    "version" : 1494442119798,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Tea",
      "description" : "Hot Leaf Juice",
      "category_id" : "LYT72K3WGJFFCIMB63XARP3I",
      "tax_ids" : [ "XHSHLHNWSI3HVI4BW5ZUZXI3" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "NAYHET5R52MIYCEF34ZMAHFM",
        "updated_at" : "2017-05-10T18:48:39.798Z",
        "version" : 1494442119798,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "ZSDZN34NAXDLC6D5ZQMNSOUM",
          "name" : "Mug",
          "ordinal" : 0,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 150,
            "currency" : "USD"
          }
        }
      } ]
    }
  }, {
    "type" : "ITEM",
    "id" : "PJMCEBHHUS3OKDB6PYUHLCPP",
    "updated_at" : "2017-05-10T18:48:39.798Z",
    "version" : 1494442119798,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Coffee",
      "description" : "Hot Bean Juice",
      "category_id" : "LYT72K3WGJFFCIMB63XARP3I",
      "tax_ids" : [ "XHSHLHNWSI3HVI4BW5ZUZXI3" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "OTYDX45SPG7LJQUVCBZI4INH",
        "updated_at" : "2017-05-10T18:48:39.798Z",
        "version" : 1494442119798,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "PJMCEBHHUS3OKDB6PYUHLCPP",
          "name" : "Regular",
          "ordinal" : 0,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 250,
            "currency" : "USD"
          }
        }
      }, {
        "type" : "ITEM_VARIATION",
        "id" : "GZDA3JB37FYVOPI4AOEBOITI",
        "updated_at" : "2017-05-10T18:48:39.798Z",
        "version" : 1494442119798,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "PJMCEBHHUS3OKDB6PYUHLCPP",
          "name" : "Large",
          "ordinal" : 1,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 350,
            "currency" : "USD"
          }
        }
      } ]
    }
  }, {
    "type" : "CATEGORY",
    "id" : "LYT72K3WGJFFCIMB63XARP3I",
    "updated_at" : "2017-05-10T18:48:39.798Z",
    "version" : 1494442119798,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "category_data" : {
      "name" : "Beverages"
    }
  }, {
    "type" : "TAX",
    "id" : "XHSHLHNWSI3HVI4BW5ZUZXI3",
    "updated_at" : "2017-05-10T18:48:39.798Z",
    "version" : 1494442119798,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "tax_data" : {
      "name" : "Sales Tax",
      "calculation_phase" : "TAX_SUBTOTAL_PHASE",
      "inclusion_type" : "ADDITIVE",
      "percentage" : "5.0",
      "applies_to_custom_amounts" : true,
      "enabled" : true
    }
  } ],
  "id_mappings" : [ {
    "client_object_id" : "#Tea",
    "object_id" : "ZSDZN34NAXDLC6D5ZQMNSOUM"
  }, {
    "client_object_id" : "#Coffee",
    "object_id" : "PJMCEBHHUS3OKDB6PYUHLCPP"
  }, {
    "client_object_id" : "#Beverages",
    "object_id" : "LYT72K3WGJFFCIMB63XARP3I"
  }, {
    "client_object_id" : "#SalesTax",
    "object_id" : "XHSHLHNWSI3HVI4BW5ZUZXI3"
  }, {
    "client_object_id" : "#Tea_Mug",
    "object_id" : "NAYHET5R52MIYCEF34ZMAHFM"
  }, {
    "client_object_id" : "#Coffee_Regular",
    "object_id" : "OTYDX45SPG7LJQUVCBZI4INH"
  }, {
    "client_object_id" : "#Coffee_Large",
    "object_id" : "GZDA3JB37FYVOPI4AOEBOITI"
  } ]
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<BatchUpsertCatalogObjectsResponse> 
     */
    open class func batchUpsertCatalogObjectsWithRequestBuilder(body: BatchUpsertCatalogObjectsRequest) -> RequestBuilder<BatchUpsertCatalogObjectsResponse> {
        let path = "/v2/catalog/batch-upsert"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchUpsertCatalogObjectsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     CatalogInfo

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func catalogInfo(completion: @escaping ((_ data: CatalogInfoResponse?,_ error: Error?) -> Void)) {
        catalogInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CatalogInfo
     - GET /v2/catalog/info
     - Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "limits" : {
    "batch_upsert_max_objects_per_batch" : 1000,
    "batch_upsert_max_total_objects" : 10000,
    "batch_retrieve_max_object_ids" : 1000,
    "search_max_page_limit" : 1000,
    "batch_delete_max_object_ids" : 200,
    "update_item_taxes_max_item_ids" : 1000,
    "update_item_taxes_max_taxes_to_enable" : 1000,
    "update_item_taxes_max_taxes_to_disable" : 1000,
    "update_item_modifier_lists_max_item_ids" : 1000,
    "update_item_modifier_lists_max_modifier_lists_to_enable" : 1000,
    "update_item_modifier_lists_max_modifier_lists_to_disable" : 1000
  }
}}]

     - returns: RequestBuilder<CatalogInfoResponse> 
     */
    open class func catalogInfoWithRequestBuilder() -> RequestBuilder<CatalogInfoResponse> {
        let path = "/v2/catalog/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CatalogInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     DeleteCatalogObject
     - parameter objectId: (path) The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCatalogObject(objectId: String, completion: @escaping ((_ data: DeleteCatalogObjectResponse?,_ error: Error?) -> Void)) {
        deleteCatalogObjectWithRequestBuilder(objectId: objectId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     DeleteCatalogObject
     - DELETE /v2/catalog/object/{object_id}
     - Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "deleted_object_ids" : [ "7SB3ZQYJ5GDMVFL7JK46JCHT", "KQLFFHA6K6J3YQAQAWDQAL57" ],
  "deleted_at" : "2016-11-16T22:25:24.878Z"
}}]
     - parameter objectId: (path) The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s). 

     - returns: RequestBuilder<DeleteCatalogObjectResponse> 
     */
    open class func deleteCatalogObjectWithRequestBuilder(objectId: String) -> RequestBuilder<DeleteCatalogObjectResponse> {
        var path = "/v2/catalog/object/{object_id}"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{object_id}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteCatalogObjectResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListCatalog
     - parameter cursor: (query) The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)     - parameter types: (query) An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listCatalog(cursor: String? = nil, types: String? = nil, completion: @escaping ((_ data: ListCatalogResponse?,_ error: Error?) -> Void)) {
        listCatalogWithRequestBuilder(cursor: cursor, types: types).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListCatalog
     - GET /v2/catalog/list
     - Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "objects" : [ {
    "type" : "CATEGORY",
    "id" : "5ZYQZZ2IECPVJ2IJ5KQPRDC3",
    "updated_at" : "2017-02-21T14:50:26.495Z",
    "version" : 1487688626495,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "category_data" : {
      "name" : "Beverages"
    }
  }, {
    "type" : "TAX",
    "id" : "L5R47DGBZOOVKCAFIXC56AEN",
    "updated_at" : "2017-02-21T14:50:26.495Z",
    "version" : 1487688626495,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "tax_data" : {
      "name" : "Sales Tax",
      "calculation_phase" : "TAX_SUBTOTAL_PHASE",
      "inclusion_type" : "ADDITIVE",
      "percentage" : "5.0",
      "enabled" : true
    }
  } ]
}}]
     - parameter cursor: (query) The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)     - parameter types: (query) An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)

     - returns: RequestBuilder<ListCatalogResponse> 
     */
    open class func listCatalogWithRequestBuilder(cursor: String? = nil, types: String? = nil) -> RequestBuilder<ListCatalogResponse> {
        let path = "/v2/catalog/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cursor": cursor, 
                        "types": types
        ])

        let requestBuilder: RequestBuilder<ListCatalogResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     RetrieveCatalogObject
     - parameter objectId: (path) The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.      - parameter includeRelatedObjects: (query) If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveCatalogObject(objectId: String, includeRelatedObjects: Bool? = nil, completion: @escaping ((_ data: RetrieveCatalogObjectResponse?,_ error: Error?) -> Void)) {
        retrieveCatalogObjectWithRequestBuilder(objectId: objectId, includeRelatedObjects: includeRelatedObjects).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     RetrieveCatalogObject
     - GET /v2/catalog/object/{object_id}
     - Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "object" : {
    "type" : "ITEM",
    "id" : "W62UWFY35CWMYGVWK6TWJDNI",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Tea",
      "description" : "Hot Leaf Juice",
      "category_id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
      "tax_ids" : [ "HURXQOOAIC4IZSI2BEXQRYFY" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "2TZFAOHWGG7PAK2QEXWYPZSP",
        "updated_at" : "2016-11-16T22:25:24.878Z",
        "version" : 1479335124878,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "W62UWFY35CWMYGVWK6TWJDNI",
          "name" : "Mug",
          "ordinal" : 0,
          "pricing_type" : "FIXED_PRICING",
          "price_money" : {
            "amount" : 150,
            "currency" : "USD"
          }
        }
      } ]
    }
  },
  "related_objects" : [ {
    "type" : "CATEGORY",
    "id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "category_data" : {
      "name" : "Beverages"
    }
  }, {
    "type" : "TAX",
    "id" : "HURXQOOAIC4IZSI2BEXQRYFY",
    "updated_at" : "2016-11-16T22:25:24.878Z",
    "version" : 1479335124878,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "tax_data" : {
      "name" : "Sales Tax",
      "calculation_phase" : "TAX_SUBTOTAL_PHASE",
      "inclusion_type" : "ADDITIVE",
      "percentage" : "5.0",
      "enabled" : true
    }
  } ]
}}]
     - parameter objectId: (path) The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.      - parameter includeRelatedObjects: (query) If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)

     - returns: RequestBuilder<RetrieveCatalogObjectResponse> 
     */
    open class func retrieveCatalogObjectWithRequestBuilder(objectId: String, includeRelatedObjects: Bool? = nil) -> RequestBuilder<RetrieveCatalogObjectResponse> {
        var path = "/v2/catalog/object/{object_id}"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{object_id}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "include_related_objects": includeRelatedObjects
        ])

        let requestBuilder: RequestBuilder<RetrieveCatalogObjectResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     SearchCatalogObjects
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchCatalogObjects(body: SearchCatalogObjectsRequest, completion: @escaping ((_ data: SearchCatalogObjectsResponse?,_ error: Error?) -> Void)) {
        searchCatalogObjectsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     SearchCatalogObjects
     - POST /v2/catalog/search
     - Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "objects" : [ {
    "type" : "ITEM",
    "id" : "X5DZ5NWWAQ44CKBLKIFQGOWK",
    "updated_at" : "2017-10-26T15:41:32.337Z",
    "version" : 1509032492337,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Tea - Black",
      "description" : "A delicious blend of black tea.",
      "category_id" : "E7CLE5RZZ744BHWVQQEAHI2C",
      "product_type" : "REGULAR",
      "tax_ids" : [ "ZXITPM6RWHZ7GZ7EIP3YKECM" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "5GSZPX6EU7MM75S57OONG3V5",
        "updated_at" : "2017-10-26T15:27:31.626Z",
        "version" : 1509031651626,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "X5DZ5NWWAQ44CKBLKIFQGOWK",
          "name" : "Regular",
          "ordinal" : 1,
          "price_money" : {
            "amount" : 150,
            "currency" : "USD"
          },
          "pricing_type" : "FIXED_PRICING"
        }
      }, {
        "type" : "ITEM_VARIATION",
        "id" : "XVLBN7DU6JTWHJTG5F265B43",
        "updated_at" : "2017-10-26T15:27:31.626Z",
        "version" : 1509031651626,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "X5DZ5NWWAQ44CKBLKIFQGOWK",
          "name" : "Large",
          "ordinal" : 2,
          "price_money" : {
            "amount" : 225,
            "currency" : "USD"
          },
          "pricing_type" : "FIXED_PRICING"
        }
      } ],
      "visibility" : "PRIVATE"
    }
  }, {
    "type" : "ITEM",
    "id" : "NNNEM3LA656Q46NXLWCNI7S5",
    "updated_at" : "2017-10-26T15:41:23.232Z",
    "version" : 1509032483232,
    "is_deleted" : false,
    "present_at_all_locations" : true,
    "item_data" : {
      "name" : "Tea - Green",
      "description" : "Relaxing green herbal tea.",
      "category_id" : "E7CLE5RZZ744BHWVQQEAHI2C",
      "product_type" : "REGULAR",
      "tax_ids" : [ "ZXITPM6RWHZ7GZ7EIP3YKECM" ],
      "variations" : [ {
        "type" : "ITEM_VARIATION",
        "id" : "FHYBVIA6NVBCSOVETA62WEA4",
        "updated_at" : "2017-10-26T15:29:00.524Z",
        "version" : 1509031740524,
        "is_deleted" : false,
        "present_at_all_locations" : true,
        "item_variation_data" : {
          "item_id" : "NNNEM3LA656Q46NXLWCNI7S5",
          "name" : "Regular",
          "ordinal" : 1,
          "price_money" : {
            "amount" : 150,
            "currency" : "USD"
          },
          "pricing_type" : "FIXED_PRICING"
        }
      } ],
      "visibility" : "PRIVATE"
    }
  } ]
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<SearchCatalogObjectsResponse> 
     */
    open class func searchCatalogObjectsWithRequestBuilder(body: SearchCatalogObjectsRequest) -> RequestBuilder<SearchCatalogObjectsResponse> {
        let path = "/v2/catalog/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchCatalogObjectsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateItemModifierLists
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemModifierLists(body: UpdateItemModifierListsRequest, completion: @escaping ((_ data: UpdateItemModifierListsResponse?,_ error: Error?) -> Void)) {
        updateItemModifierListsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateItemModifierLists
     - POST /v2/catalog/update-item-modifier-lists
     - Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "updated_at" : "2016-11-16T22:25:24.878Z"
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<UpdateItemModifierListsResponse> 
     */
    open class func updateItemModifierListsWithRequestBuilder(body: UpdateItemModifierListsRequest) -> RequestBuilder<UpdateItemModifierListsResponse> {
        let path = "/v2/catalog/update-item-modifier-lists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateItemModifierListsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateItemTaxes
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemTaxes(body: UpdateItemTaxesRequest, completion: @escaping ((_ data: UpdateItemTaxesResponse?,_ error: Error?) -> Void)) {
        updateItemTaxesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateItemTaxes
     - POST /v2/catalog/update-item-taxes
     - Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "updated_at" : "2016-11-16T22:25:24.878Z"
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<UpdateItemTaxesResponse> 
     */
    open class func updateItemTaxesWithRequestBuilder(body: UpdateItemTaxesRequest) -> RequestBuilder<UpdateItemTaxesResponse> {
        let path = "/v2/catalog/update-item-taxes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateItemTaxesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpsertCatalogObject
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func upsertCatalogObject(body: UpsertCatalogObjectRequest, completion: @escaping ((_ data: UpsertCatalogObjectResponse?,_ error: Error?) -> Void)) {
        upsertCatalogObjectWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpsertCatalogObject
     - POST /v2/catalog/object
     - Creates or updates the target [CatalogObject](#type-catalogobject).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "catalog_object" : {
    "type" : "ITEM",
    "id" : "7SB3ZQYJ5GDMVFL7JK46JCHT",
    "updated_at" : "2016-11-16T22:32:42.996Z",
    "version" : 1479335562996,
    "is_deleted" : false,
    "item_data" : {
      "name" : "Cocoa",
      "description" : "Hot chocolate",
      "abbreviation" : "Ch"
    }
  },
  "id_mappings" : [ {
    "client_object_id" : "#Cocoa",
    "object_id" : "7SB3ZQYJ5GDMVFL7JK46JCHT"
  } ]
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<UpsertCatalogObjectResponse> 
     */
    open class func upsertCatalogObjectWithRequestBuilder(body: UpsertCatalogObjectRequest) -> RequestBuilder<UpsertCatalogObjectResponse> {
        let path = "/v2/catalog/object"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpsertCatalogObjectResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
