//
// TransactionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TransactionsAPI {
    /**
     CaptureTransaction
     - parameter locationId: (path)       - parameter transactionId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func captureTransaction(locationId: String, transactionId: String, completion: @escaping ((_ data: CaptureTransactionResponse?,_ error: Error?) -> Void)) {
        captureTransactionWithRequestBuilder(locationId: locationId, transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CaptureTransaction
     - POST /v2/locations/{location_id}/transactions/{transaction_id}/capture
     - Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a `delay_capture` value of `true`.  See the [Delay Capture of Funds](/transactions-api/cookbook/delay-capture) recipe for more information.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter locationId: (path)       - parameter transactionId: (path)  

     - returns: RequestBuilder<CaptureTransactionResponse> 
     */
    open class func captureTransactionWithRequestBuilder(locationId: String, transactionId: String) -> RequestBuilder<CaptureTransactionResponse> {
        var path = "/v2/locations/{location_id}/transactions/{transaction_id}/capture"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transaction_id}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CaptureTransactionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Charge
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the location to associate the created transaction with. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func charge(body: ChargeRequest, locationId: String, completion: @escaping ((_ data: ChargeResponse?,_ error: Error?) -> Void)) {
        chargeWithRequestBuilder(body: body, locationId: locationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Charge
     - POST /v2/locations/{location_id}/transactions
     - Charges a card represented by a card nonce or a customer's card on file.  Deprecated - recommend using [CreatePayment](#endpoint-payments-createpayment)  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "transaction" : {
    "id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
    "location_id" : "18YC4JDH91E1H",
    "created_at" : "2016-03-10T22:57:56Z",
    "tenders" : [ {
      "id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
      "location_id" : "18YC4JDH91E1H",
      "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
      "created_at" : "2016-03-10T22:57:56Z",
      "note" : "some optional note",
      "amount_money" : {
        "amount" : 200,
        "currency" : "USD"
      },
      "additional_recipients" : [ {
        "location_id" : "057P5VYJ4A5X1",
        "description" : "Application fees",
        "amount_money" : {
          "amount" : 20,
          "currency" : "USD"
        },
        "receivable_id" : "ISu5xwxJ5v0CMJTQq7RvqyMF"
      } ],
      "type" : "CARD",
      "card_details" : {
        "status" : "CAPTURED",
        "card" : {
          "card_brand" : "VISA",
          "last_4" : "1111"
        },
        "entry_method" : "KEYED"
      }
    } ],
    "reference_id" : "some optional reference id",
    "product" : "EXTERNAL_API"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the location to associate the created transaction with. 

     - returns: RequestBuilder<ChargeResponse> 
     */
    open class func chargeWithRequestBuilder(body: ChargeRequest, locationId: String) -> RequestBuilder<ChargeResponse> {
        var path = "/v2/locations/{location_id}/transactions"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChargeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     CreateRefund
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the original transaction&#x27;s associated location.      - parameter transactionId: (path) The ID of the original transaction that includes the tender to refund. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRefund(body: CreateRefundRequest, locationId: String, transactionId: String, completion: @escaping ((_ data: CreateRefundResponse?,_ error: Error?) -> Void)) {
        createRefundWithRequestBuilder(body: body, locationId: locationId, transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreateRefund
     - POST /v2/locations/{location_id}/transactions/{transaction_id}/refund
     - Initiates a refund for a previously charged tender.  Deprecated - recommend using [RefundPayment](#endpoint-refunds-refundpayment)  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "refund" : {
    "id" : "b27436d1-7f8e-5610-45c6-417ef71434b4-SW",
    "location_id" : "18YC4JDH91E1H",
    "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
    "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
    "created_at" : "2016-02-12T00:28:18Z",
    "reason" : "some reason",
    "amount_money" : {
      "amount" : 100,
      "currency" : "USD"
    },
    "additional_recipients" : [ {
      "location_id" : "057P5VYJ4A5X1",
      "description" : "Application fees",
      "amount_money" : {
        "amount" : 10,
        "currency" : "USD"
      },
      "receivable_id" : "ISu5xwxJ5v0CMJTQq7RvqyMF"
    } ],
    "status" : "PENDING"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the original transaction&#x27;s associated location.      - parameter transactionId: (path) The ID of the original transaction that includes the tender to refund. 

     - returns: RequestBuilder<CreateRefundResponse> 
     */
    open class func createRefundWithRequestBuilder(body: CreateRefundRequest, locationId: String, transactionId: String) -> RequestBuilder<CreateRefundResponse> {
        var path = "/v2/locations/{location_id}/transactions/{transaction_id}/refund"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transaction_id}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateRefundResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     ListRefunds
     - parameter locationId: (path) The ID of the location to list refunds for.      - parameter beginTime: (query) The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)     - parameter endTime: (query) The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)     - parameter sortOrder: (query) The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRefunds(locationId: String, beginTime: String? = nil, endTime: String? = nil, sortOrder: String? = nil, cursor: String? = nil, completion: @escaping ((_ data: ListRefundsResponse?,_ error: Error?) -> Void)) {
        listRefundsWithRequestBuilder(locationId: locationId, beginTime: beginTime, endTime: endTime, sortOrder: sortOrder, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListRefunds
     - GET /v2/locations/{location_id}/refunds
     - Lists refunds for one of a business's locations.  Deprecated - recommend using [SearchOrders](#endpoint-orders-searchorders)  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square's Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "refunds" : [ {
    "id" : "b27436d1-7f8e-5610-45c6-417ef71434b4-SW",
    "location_id" : "18YC4JDH91E1H",
    "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
    "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
    "created_at" : "2016-01-20T00:28:18Z",
    "reason" : "some reason",
    "amount_money" : {
      "amount" : 100,
      "currency" : "USD"
    },
    "additional_recipients" : [ {
      "location_id" : "057P5VYJ4A5X1",
      "description" : "Application fees",
      "amount_money" : {
        "amount" : 10,
        "currency" : "USD"
      }
    } ],
    "status" : "APPROVED"
  } ]
}}]
     - parameter locationId: (path) The ID of the location to list refunds for.      - parameter beginTime: (query) The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)     - parameter endTime: (query) The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)     - parameter sortOrder: (query) The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)

     - returns: RequestBuilder<ListRefundsResponse> 
     */
    open class func listRefundsWithRequestBuilder(locationId: String, beginTime: String? = nil, endTime: String? = nil, sortOrder: String? = nil, cursor: String? = nil) -> RequestBuilder<ListRefundsResponse> {
        var path = "/v2/locations/{location_id}/refunds"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "begin_time": beginTime, 
                        "end_time": endTime, 
                        "sort_order": sortOrder, 
                        "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<ListRefundsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListTransactions
     - parameter locationId: (path) The ID of the location to list transactions for.      - parameter beginTime: (query) The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)     - parameter endTime: (query) The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)     - parameter sortOrder: (query) The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTransactions(locationId: String, beginTime: String? = nil, endTime: String? = nil, sortOrder: String? = nil, cursor: String? = nil, completion: @escaping ((_ data: ListTransactionsResponse?,_ error: Error?) -> Void)) {
        listTransactionsWithRequestBuilder(locationId: locationId, beginTime: beginTime, endTime: endTime, sortOrder: sortOrder, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListTransactions
     - GET /v2/locations/{location_id}/transactions
     - Lists transactions for a particular location.  Deprecated - recommend using [SearchOrders](#endpoint-orders-searchorders)  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "transactions" : [ {
    "id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
    "location_id" : "18YC4JDH91E1H",
    "created_at" : "2016-01-20T22:57:56Z",
    "tenders" : [ {
      "id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
      "location_id" : "18YC4JDH91E1H",
      "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
      "created_at" : "2016-01-20T22:57:56Z",
      "note" : "some optional note",
      "amount_money" : {
        "amount" : 5000,
        "currency" : "USD"
      },
      "processing_fee_money" : {
        "amount" : 138,
        "currency" : "USD"
      },
      "type" : "CARD",
      "card_details" : {
        "status" : "CAPTURED",
        "card" : {
          "card_brand" : "VISA",
          "last_4" : "1111"
        },
        "entry_method" : "KEYED"
      },
      "additional_recipients" : [ {
        "location_id" : "057P5VYJ4A5X1",
        "description" : "Application fees",
        "amount_money" : {
          "amount" : 20,
          "currency" : "USD"
        }
      } ]
    } ],
    "refunds" : [ {
      "id" : "7a5RcVI0CxbOcJ2wMOkE",
      "location_id" : "18YC4JDH91E1H",
      "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
      "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
      "created_at" : "2016-01-20T22:59:20Z",
      "reason" : "some reason why",
      "amount_money" : {
        "amount" : 5000,
        "currency" : "USD"
      },
      "status" : "APPROVED",
      "processing_fee_money" : {
        "amount" : 138,
        "currency" : "USD"
      },
      "additional_recipients" : [ {
        "location_id" : "057P5VYJ4A5X1",
        "description" : "Application fees",
        "amount_money" : {
          "amount" : 100,
          "currency" : "USD"
        }
      } ]
    } ],
    "reference_id" : "some optional reference id",
    "product" : "EXTERNAL_API"
  } ]
}}]
     - parameter locationId: (path) The ID of the location to list transactions for.      - parameter beginTime: (query) The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)     - parameter endTime: (query) The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)     - parameter sortOrder: (query) The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)

     - returns: RequestBuilder<ListTransactionsResponse> 
     */
    open class func listTransactionsWithRequestBuilder(locationId: String, beginTime: String? = nil, endTime: String? = nil, sortOrder: String? = nil, cursor: String? = nil) -> RequestBuilder<ListTransactionsResponse> {
        var path = "/v2/locations/{location_id}/transactions"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "begin_time": beginTime, 
                        "end_time": endTime, 
                        "sort_order": sortOrder, 
                        "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<ListTransactionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     RetrieveTransaction
     - parameter locationId: (path) The ID of the transaction&#x27;s associated location.      - parameter transactionId: (path) The ID of the transaction to retrieve. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveTransaction(locationId: String, transactionId: String, completion: @escaping ((_ data: RetrieveTransactionResponse?,_ error: Error?) -> Void)) {
        retrieveTransactionWithRequestBuilder(locationId: locationId, transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     RetrieveTransaction
     - GET /v2/locations/{location_id}/transactions/{transaction_id}
     - Retrieves details for a single transaction.  Deprecated - recommend using [BatchRetrieveOrders](#endpoint-batchretrieveorders)
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "transaction" : {
    "id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
    "location_id" : "18YC4JDH91E1H",
    "created_at" : "2016-03-10T22:57:56Z",
    "tenders" : [ {
      "id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
      "location_id" : "18YC4JDH91E1H",
      "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
      "created_at" : "2016-03-10T22:57:56Z",
      "note" : "some optional note",
      "amount_money" : {
        "amount" : 5000,
        "currency" : "USD"
      },
      "processing_fee_money" : {
        "amount" : 138,
        "currency" : "USD"
      },
      "type" : "CARD",
      "card_details" : {
        "status" : "CAPTURED",
        "card" : {
          "card_brand" : "VISA",
          "last_4" : "1111"
        },
        "entry_method" : "KEYED"
      },
      "additional_recipients" : [ {
        "location_id" : "057P5VYJ4A5X1",
        "description" : "Application fees",
        "amount_money" : {
          "amount" : 20,
          "currency" : "USD"
        }
      } ]
    } ],
    "reference_id" : "some optional reference id",
    "product" : "EXTERNAL_API"
  }
}}]
     - parameter locationId: (path) The ID of the transaction&#x27;s associated location.      - parameter transactionId: (path) The ID of the transaction to retrieve. 

     - returns: RequestBuilder<RetrieveTransactionResponse> 
     */
    open class func retrieveTransactionWithRequestBuilder(locationId: String, transactionId: String) -> RequestBuilder<RetrieveTransactionResponse> {
        var path = "/v2/locations/{location_id}/transactions/{transaction_id}"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transaction_id}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RetrieveTransactionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     VoidTransaction
     - parameter locationId: (path)       - parameter transactionId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func voidTransaction(locationId: String, transactionId: String, completion: @escaping ((_ data: VoidTransactionResponse?,_ error: Error?) -> Void)) {
        voidTransactionWithRequestBuilder(locationId: locationId, transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     VoidTransaction
     - POST /v2/locations/{location_id}/transactions/{transaction_id}/void
     - Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a `delay_capture` value of `true`.  See the [Delay Capture of Funds](/transactions-api/cookbook/delay-capture) recipe for more information.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter locationId: (path)       - parameter transactionId: (path)  

     - returns: RequestBuilder<VoidTransactionResponse> 
     */
    open class func voidTransactionWithRequestBuilder(locationId: String, transactionId: String) -> RequestBuilder<VoidTransactionResponse> {
        var path = "/v2/locations/{location_id}/transactions/{transaction_id}/void"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transaction_id}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VoidTransactionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
