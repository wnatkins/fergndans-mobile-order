//
// LaborAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LaborAPI {
    /**
     CreateBreakType
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBreakType(body: CreateBreakTypeRequest, completion: @escaping ((_ data: CreateBreakTypeResponse?,_ error: Error?) -> Void)) {
        createBreakTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreateBreakType
     - POST /v2/labor/break-types
     - Creates a new `BreakType`.   A `BreakType` is a template for creating `Break` objects.  You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "break_type" : {
    "id" : "49SSVDJG76WF3",
    "location_id" : "CGJN03P1D08GF",
    "break_name" : "Lunch Break",
    "expected_duration" : "PT30M",
    "is_paid" : true,
    "version" : 1,
    "created_at" : "2019-02-26T22:42:54Z",
    "updated_at" : "2019-02-26T22:42:54Z"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<CreateBreakTypeResponse> 
     */
    open class func createBreakTypeWithRequestBuilder(body: CreateBreakTypeRequest) -> RequestBuilder<CreateBreakTypeResponse> {
        let path = "/v2/labor/break-types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateBreakTypeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     CreateShift
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createShift(body: CreateShiftRequest, completion: @escaping ((_ data: CreateShiftResponse?,_ error: Error?) -> Void)) {
        createShiftWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreateShift
     - POST /v2/labor/shifts
     - Creates a new `Shift`.   A `Shift` represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another  shift with an `OPEN` status.  - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "shift" : {
    "id" : "K0YH4CV5462JB",
    "employee_id" : "ormj0jJJZ5OZIzxrZYJI",
    "location_id" : "PAA1RJZZKXBFG",
    "timezone" : "America/New_York",
    "start_at" : "2019-01-25T03:11:00-05:00",
    "end_at" : "2019-01-25T13:11:00-05:00",
    "wage" : {
      "title" : "Barista",
      "hourly_rate" : {
        "amount" : 1100,
        "currency" : "USD"
      }
    },
    "breaks" : [ {
      "id" : "X7GAQYVVRRG6P",
      "start_at" : "2019-01-25T06:11:00-05:00",
      "end_at" : "2019-01-25T06:16:00-05:00",
      "break_type_id" : "REGS1EQR1TPZ5",
      "name" : "Tea Break",
      "expected_duration" : "PT5M",
      "is_paid" : true
    } ],
    "status" : "CLOSED",
    "version" : 1,
    "created_at" : "2019-02-28T00:39:02Z",
    "updated_at" : "2019-02-28T00:39:02Z"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<CreateShiftResponse> 
     */
    open class func createShiftWithRequestBuilder(body: CreateShiftRequest) -> RequestBuilder<CreateShiftResponse> {
        let path = "/v2/labor/shifts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateShiftResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     DeleteBreakType
     - parameter _id: (path) UUID for the &#x60;BreakType&#x60; being deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteBreakType(_id: String, completion: @escaping ((_ data: DeleteBreakTypeResponse?,_ error: Error?) -> Void)) {
        deleteBreakTypeWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     DeleteBreakType
     - DELETE /v2/labor/break-types/{id}
     - Deletes an existing `BreakType`.   A `BreakType` can be deleted even if it is referenced from a `Shift`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter _id: (path) UUID for the &#x60;BreakType&#x60; being deleted. 

     - returns: RequestBuilder<DeleteBreakTypeResponse> 
     */
    open class func deleteBreakTypeWithRequestBuilder(_id: String) -> RequestBuilder<DeleteBreakTypeResponse> {
        var path = "/v2/labor/break-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteBreakTypeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     DeleteShift
     - parameter _id: (path) UUID for the &#x60;Shift&#x60; being deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteShift(_id: String, completion: @escaping ((_ data: DeleteShiftResponse?,_ error: Error?) -> Void)) {
        deleteShiftWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     DeleteShift
     - DELETE /v2/labor/shifts/{id}
     - Deletes a `Shift`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter _id: (path) UUID for the &#x60;Shift&#x60; being deleted. 

     - returns: RequestBuilder<DeleteShiftResponse> 
     */
    open class func deleteShiftWithRequestBuilder(_id: String) -> RequestBuilder<DeleteShiftResponse> {
        var path = "/v2/labor/shifts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteShiftResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     GetBreakType
     - parameter _id: (path) UUID for the &#x60;BreakType&#x60; being retrieved. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBreakType(_id: String, completion: @escaping ((_ data: GetBreakTypeResponse?,_ error: Error?) -> Void)) {
        getBreakTypeWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     GetBreakType
     - GET /v2/labor/break-types/{id}
     - Returns a single `BreakType` specified by id.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "break_type" : {
    "id" : "lA0mj_RSOprNPwMUXdYp",
    "location_id" : "059SB0E0WCNWS",
    "break_name" : "Lunch Break",
    "expected_duration" : "PT30M",
    "is_paid" : true,
    "version" : 1,
    "created_at" : "2019-02-21T17:50:00Z",
    "updated_at" : "2019-02-21T17:50:00Z"
  }
}}]
     - parameter _id: (path) UUID for the &#x60;BreakType&#x60; being retrieved. 

     - returns: RequestBuilder<GetBreakTypeResponse> 
     */
    open class func getBreakTypeWithRequestBuilder(_id: String) -> RequestBuilder<GetBreakTypeResponse> {
        var path = "/v2/labor/break-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetBreakTypeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     GetEmployeeWage
     - parameter _id: (path) UUID for the &#x60;EmployeeWage&#x60; being retrieved. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmployeeWage(_id: String, completion: @escaping ((_ data: GetEmployeeWageResponse?,_ error: Error?) -> Void)) {
        getEmployeeWageWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     GetEmployeeWage
     - GET /v2/labor/employee-wages/{id}
     - Returns a single `EmployeeWage` specified by id.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "employee_wage" : {
    "id" : "pXS3qCv7BERPnEGedM4S8mhm",
    "employee_id" : "33fJchumvVdJwxV0H6L9",
    "title" : "Manager",
    "hourly_rate" : {
      "amount" : 2000,
      "currency" : "USD"
    }
  }
}}]
     - parameter _id: (path) UUID for the &#x60;EmployeeWage&#x60; being retrieved. 

     - returns: RequestBuilder<GetEmployeeWageResponse> 
     */
    open class func getEmployeeWageWithRequestBuilder(_id: String) -> RequestBuilder<GetEmployeeWageResponse> {
        var path = "/v2/labor/employee-wages/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetEmployeeWageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     GetShift
     - parameter _id: (path) UUID for the &#x60;Shift&#x60; being retrieved. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShift(_id: String, completion: @escaping ((_ data: GetShiftResponse?,_ error: Error?) -> Void)) {
        getShiftWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     GetShift
     - GET /v2/labor/shifts/{id}
     - Returns a single `Shift` specified by id.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "shift" : {
    "id" : "T35HMQSN89SV4",
    "employee_id" : "D71KRMQof6cXGUW0aAv7",
    "location_id" : "PAA1RJZZKXBFG",
    "timezone" : "America/New_York",
    "start_at" : "2019-02-23T18:00:00-05:00",
    "end_at" : "2019-02-23T21:00:00-05:00",
    "wage" : {
      "title" : "Cashier",
      "hourly_rate" : {
        "amount" : 1457,
        "currency" : "USD"
      }
    },
    "breaks" : [ {
      "id" : "M9BBKEPQAQD2T",
      "start_at" : "2019-02-23T19:00:00-05:00",
      "end_at" : "2019-02-23T20:00:00-05:00",
      "break_type_id" : "92EPDRQKJ5088",
      "name" : "Lunch Break",
      "expected_duration" : "PT1H",
      "is_paid" : true
    } ],
    "status" : "CLOSED",
    "version" : 1,
    "created_at" : "2019-02-27T00:12:12Z",
    "updated_at" : "2019-02-27T00:12:12Z"
  }
}}]
     - parameter _id: (path) UUID for the &#x60;Shift&#x60; being retrieved. 

     - returns: RequestBuilder<GetShiftResponse> 
     */
    open class func getShiftWithRequestBuilder(_id: String) -> RequestBuilder<GetShiftResponse> {
        var path = "/v2/labor/shifts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetShiftResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListBreakTypes
     - parameter locationId: (query) Filter Break Types returned to only those that are associated with the specified location. (optional)     - parameter limit: (query) Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)     - parameter cursor: (query) Pointer to the next page of Break Type results to fetch. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listBreakTypes(locationId: String? = nil, limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: ListBreakTypesResponse?,_ error: Error?) -> Void)) {
        listBreakTypesWithRequestBuilder(locationId: locationId, limit: limit, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListBreakTypes
     - GET /v2/labor/break-types
     - Returns a paginated list of `BreakType` instances for a business.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "break_types" : [ {
    "id" : "REGS1EQR1TPZ5",
    "location_id" : "PAA1RJZZKXBFG",
    "break_name" : "Coffee Break",
    "expected_duration" : "PT5M",
    "is_paid" : false,
    "version" : 1,
    "created_at" : "2019-01-22T20:47:37Z",
    "updated_at" : "2019-01-22T20:47:37Z"
  }, {
    "id" : "92EPDRQKJ5088",
    "location_id" : "PAA1RJZZKXBFG",
    "break_name" : "Lunch Break",
    "expected_duration" : "PT1H",
    "is_paid" : true,
    "version" : 3,
    "created_at" : "2019-01-25T19:26:30Z",
    "updated_at" : "2019-01-25T19:26:30Z"
  } ],
  "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED"
}}]
     - parameter locationId: (query) Filter Break Types returned to only those that are associated with the specified location. (optional)     - parameter limit: (query) Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)     - parameter cursor: (query) Pointer to the next page of Break Type results to fetch. (optional)

     - returns: RequestBuilder<ListBreakTypesResponse> 
     */
    open class func listBreakTypesWithRequestBuilder(locationId: String? = nil, limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<ListBreakTypesResponse> {
        let path = "/v2/labor/break-types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "location_id": locationId, 
                        "limit": limit?.encodeToJSON(), 
                        "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<ListBreakTypesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListEmployeeWages
     - parameter employeeId: (query) Filter wages returned to only those that are associated with the specified employee. (optional)     - parameter limit: (query) Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)     - parameter cursor: (query) Pointer to the next page of Employee Wage results to fetch. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listEmployeeWages(employeeId: String? = nil, limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: ListEmployeeWagesResponse?,_ error: Error?) -> Void)) {
        listEmployeeWagesWithRequestBuilder(employeeId: employeeId, limit: limit, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListEmployeeWages
     - GET /v2/labor/employee-wages
     - Returns a paginated list of `EmployeeWage` instances for a business.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "employee_wages" : [ {
    "id" : "pXS3qCv7BERPnEGedM4S8mhm",
    "employee_id" : "33fJchumvVdJwxV0H6L9",
    "title" : "Manager",
    "hourly_rate" : {
      "amount" : 3250,
      "currency" : "USD"
    }
  }, {
    "id" : "rZduCkzYDUVL3ovh1sQgbue6",
    "employee_id" : "33fJchumvVdJwxV0H6L9",
    "title" : "Cook",
    "hourly_rate" : {
      "amount" : 2600,
      "currency" : "USD"
    }
  }, {
    "id" : "FxLbs5KpPUHa8wyt5ctjubDX",
    "employee_id" : "33fJchumvVdJwxV0H6L9",
    "title" : "Barista",
    "hourly_rate" : {
      "amount" : 1600,
      "currency" : "USD"
    }
  }, {
    "id" : "vD1wCgijMDR3cX5TPnu7VXto",
    "employee_id" : "33fJchumvVdJwxV0H6L9",
    "title" : "Cashier",
    "hourly_rate" : {
      "amount" : 1700,
      "currency" : "USD"
    }
  } ],
  "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED"
}}]
     - parameter employeeId: (query) Filter wages returned to only those that are associated with the specified employee. (optional)     - parameter limit: (query) Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)     - parameter cursor: (query) Pointer to the next page of Employee Wage results to fetch. (optional)

     - returns: RequestBuilder<ListEmployeeWagesResponse> 
     */
    open class func listEmployeeWagesWithRequestBuilder(employeeId: String? = nil, limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<ListEmployeeWagesResponse> {
        let path = "/v2/labor/employee-wages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "employee_id": employeeId, 
                        "limit": limit?.encodeToJSON(), 
                        "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<ListEmployeeWagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListWorkweekConfigs
     - parameter limit: (query) Maximum number of Workweek Configs to return per page. (optional)     - parameter cursor: (query) Pointer to the next page of Workweek Config results to fetch. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listWorkweekConfigs(limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: ListWorkweekConfigsResponse?,_ error: Error?) -> Void)) {
        listWorkweekConfigsWithRequestBuilder(limit: limit, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListWorkweekConfigs
     - GET /v2/labor/workweek-configs
     - Returns a list of `WorkweekConfig` instances for a business.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "workweek_configs" : [ {
    "id" : "FY4VCAQN700GM",
    "start_of_week" : "MON",
    "start_of_day_local_time" : "10:00",
    "version" : 11,
    "created_at" : "2016-02-04T00:58:24Z",
    "updated_at" : "2019-02-28T01:04:35Z"
  } ],
  "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED"
}}]
     - parameter limit: (query) Maximum number of Workweek Configs to return per page. (optional)     - parameter cursor: (query) Pointer to the next page of Workweek Config results to fetch. (optional)

     - returns: RequestBuilder<ListWorkweekConfigsResponse> 
     */
    open class func listWorkweekConfigsWithRequestBuilder(limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<ListWorkweekConfigsResponse> {
        let path = "/v2/labor/workweek-configs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<ListWorkweekConfigsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     SearchShifts
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchShifts(body: SearchShiftsRequest, completion: @escaping ((_ data: SearchShiftsResponse?,_ error: Error?) -> Void)) {
        searchShiftsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     SearchShifts
     - POST /v2/labor/shifts/search
     - Returns a paginated list of `Shift` records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "shifts" : [ {
    "id" : "X714F3HA6D1PT",
    "employee_id" : "ormj0jJJZ5OZIzxrZYJI",
    "location_id" : "PAA1RJZZKXBFG",
    "timezone" : "America/New_York",
    "start_at" : "2019-01-21T03:11:00-05:00",
    "end_at" : "2019-01-21T13:11:00-05:00",
    "wage" : {
      "title" : "Barista",
      "hourly_rate" : {
        "amount" : 1100,
        "currency" : "USD"
      }
    },
    "breaks" : [ {
      "id" : "SJW7X6AKEJQ65",
      "start_at" : "2019-01-21T06:11:00-05:00",
      "end_at" : "2019-01-21T06:11:00-05:00",
      "break_type_id" : "REGS1EQR1TPZ5",
      "name" : "Tea Break",
      "expected_duration" : "PT10M",
      "is_paid" : true
    } ],
    "status" : "CLOSED",
    "version" : 6,
    "created_at" : "2019-01-24T01:12:03Z",
    "updated_at" : "2019-02-07T22:21:08Z"
  }, {
    "id" : "GDHYBZYWK0P2V",
    "employee_id" : "33fJchumvVdJwxV0H6L9",
    "location_id" : "PAA1RJZZKXBFG",
    "timezone" : "America/New_York",
    "start_at" : "2019-01-22T12:02:00-05:00",
    "end_at" : "2019-01-22T13:02:00-05:00",
    "wage" : {
      "title" : "Cook",
      "hourly_rate" : {
        "amount" : 1600,
        "currency" : "USD"
      }
    },
    "breaks" : [ {
      "id" : "BKS6VR7WR748A",
      "start_at" : "2019-01-23T14:30:00-05:00",
      "end_at" : "2019-01-23T14:40:00-05:00",
      "break_type_id" : "WQX00VR99F53J",
      "name" : "Tea Break",
      "expected_duration" : "PT10M",
      "is_paid" : true
    }, {
      "id" : "BQFEZSHFZSC51",
      "start_at" : "2019-01-22T12:30:00-05:00",
      "end_at" : "2019-01-22T12:44:00-05:00",
      "break_type_id" : "P6Q468ZFRN1AC",
      "name" : "Coffee Break",
      "expected_duration" : "PT15M",
      "is_paid" : false
    } ],
    "status" : "CLOSED",
    "version" : 16,
    "created_at" : "2019-01-23T23:32:45Z",
    "updated_at" : "2019-01-24T00:56:25Z"
  } ]
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<SearchShiftsResponse> 
     */
    open class func searchShiftsWithRequestBuilder(body: SearchShiftsRequest) -> RequestBuilder<SearchShiftsResponse> {
        let path = "/v2/labor/shifts/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchShiftsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateBreakType
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter _id: (path) UUID for the &#x60;BreakType&#x60; being updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateBreakType(body: UpdateBreakTypeRequest, _id: String, completion: @escaping ((_ data: UpdateBreakTypeResponse?,_ error: Error?) -> Void)) {
        updateBreakTypeWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateBreakType
     - PUT /v2/labor/break-types/{id}
     - Updates an existing `BreakType`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "break_type" : {
    "id" : "Q6JSJS6D4DBCH",
    "location_id" : "26M7H24AZ9N6R",
    "break_name" : "Lunch",
    "expected_duration" : "PT50M",
    "is_paid" : true,
    "version" : 2,
    "created_at" : "2018-06-12T20:19:12Z",
    "updated_at" : "2019-02-26T23:12:59Z"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter _id: (path) UUID for the &#x60;BreakType&#x60; being updated. 

     - returns: RequestBuilder<UpdateBreakTypeResponse> 
     */
    open class func updateBreakTypeWithRequestBuilder(body: UpdateBreakTypeRequest, _id: String) -> RequestBuilder<UpdateBreakTypeResponse> {
        var path = "/v2/labor/break-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateBreakTypeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateShift
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter _id: (path) ID of the object being updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateShift(body: UpdateShiftRequest, _id: String, completion: @escaping ((_ data: UpdateShiftResponse?,_ error: Error?) -> Void)) {
        updateShiftWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateShift
     - PUT /v2/labor/shifts/{id}
     - Updates an existing `Shift`.   When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have  the `end_at` property set to a valid RFC-3339 datetime string.   When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "shift" : {
    "id" : "K0YH4CV5462JB",
    "employee_id" : "ormj0jJJZ5OZIzxrZYJI",
    "location_id" : "PAA1RJZZKXBFG",
    "timezone" : "America/New_York",
    "start_at" : "2019-01-25T03:11:00-05:00",
    "end_at" : "2019-01-25T13:11:00-05:00",
    "wage" : {
      "title" : "Bartender",
      "hourly_rate" : {
        "amount" : 1500,
        "currency" : "USD"
      }
    },
    "breaks" : [ {
      "id" : "X7GAQYVVRRG6P",
      "start_at" : "2019-01-25T06:11:00-05:00",
      "end_at" : "2019-01-25T06:16:00-05:00",
      "break_type_id" : "REGS1EQR1TPZ5",
      "name" : "Tea Break",
      "expected_duration" : "PT5M",
      "is_paid" : true
    } ],
    "status" : "CLOSED",
    "version" : 2,
    "created_at" : "2019-02-28T00:39:02Z",
    "updated_at" : "2019-02-28T00:42:41Z"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter _id: (path) ID of the object being updated. 

     - returns: RequestBuilder<UpdateShiftResponse> 
     */
    open class func updateShiftWithRequestBuilder(body: UpdateShiftRequest, _id: String) -> RequestBuilder<UpdateShiftResponse> {
        var path = "/v2/labor/shifts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateShiftResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateWorkweekConfig
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter _id: (path) UUID for the &#x60;WorkweekConfig&#x60; object being updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateWorkweekConfig(body: UpdateWorkweekConfigRequest, _id: String, completion: @escaping ((_ data: UpdateWorkweekConfigResponse?,_ error: Error?) -> Void)) {
        updateWorkweekConfigWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateWorkweekConfig
     - PUT /v2/labor/workweek-configs/{id}
     - Updates a `WorkweekConfig`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "workweek_config" : {
    "id" : "FY4VCAQN700GM",
    "start_of_week" : "MON",
    "start_of_day_local_time" : "10:00",
    "version" : 11,
    "created_at" : "2016-02-04T00:58:24Z",
    "updated_at" : "2019-02-28T01:04:35Z"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter _id: (path) UUID for the &#x60;WorkweekConfig&#x60; object being updated. 

     - returns: RequestBuilder<UpdateWorkweekConfigResponse> 
     */
    open class func updateWorkweekConfigWithRequestBuilder(body: UpdateWorkweekConfigRequest, _id: String) -> RequestBuilder<UpdateWorkweekConfigResponse> {
        var path = "/v2/labor/workweek-configs/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateWorkweekConfigResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
