//
// PaymentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PaymentsAPI {
    /**
     CancelPayment
     - parameter paymentId: (path) &#x60;payment_id&#x60; identifying the payment to be canceled. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelPayment(paymentId: String, completion: @escaping ((_ data: CancelPaymentResponse?,_ error: Error?) -> Void)) {
        cancelPaymentWithRequestBuilder(paymentId: paymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CancelPayment
     - POST /v2/payments/{payment_id}/cancel
     - Cancels a payment. If you set `autocomplete` to false when creating a payment,  you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "payment" : {
    "id" : "YNR82sYrdgYlEEvJHnkJ7jrRuaB",
    "created_at" : "2018-10-17T20:38:46.743Z",
    "updated_at" : "2018-10-17T20:38:57.693Z",
    "amount_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "app_fee_money" : {
      "amount" : 10,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "status" : "CANCELED",
    "source_type" : "CARD",
    "card_details" : {
      "status" : "VOIDED",
      "card" : {
        "card_brand" : "VISA",
        "last_4" : "1234",
        "exp_month" : 2,
        "exp_year" : 2024,
        "fingerprint" : "sq-1-9PP0tWfcM6vIsYmfsesdjfhduHSDFNdJFNDfDNFjdfjpseirDErsaP"
      },
      "entry_method" : "KEYED",
      "cvv_status" : "CVV_ACCEPTED",
      "avs_status" : "AVS_ACCEPTED",
      "auth_result_code" : "eWZBDh"
    },
    "reference_id" : "12323232323"
  }
}}]
     - parameter paymentId: (path) &#x60;payment_id&#x60; identifying the payment to be canceled. 

     - returns: RequestBuilder<CancelPaymentResponse> 
     */
    open class func cancelPaymentWithRequestBuilder(paymentId: String) -> RequestBuilder<CancelPaymentResponse> {
        var path = "/v2/payments/{payment_id}/cancel"
        let paymentIdPreEscape = "\(paymentId)"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{payment_id}", with: paymentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CancelPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     CancelPaymentByIdempotencyKey
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelPaymentByIdempotencyKey(body: CancelPaymentByIdempotencyKeyRequest, completion: @escaping ((_ data: CancelPaymentByIdempotencyKeyResponse?,_ error: Error?) -> Void)) {
        cancelPaymentByIdempotencyKeyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CancelPaymentByIdempotencyKey
     - POST /v2/payments/cancel
     - Cancels a payment identified by the idenpotency key that is specified the request.  Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don't get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<CancelPaymentByIdempotencyKeyResponse> 
     */
    open class func cancelPaymentByIdempotencyKeyWithRequestBuilder(body: CancelPaymentByIdempotencyKeyRequest) -> RequestBuilder<CancelPaymentByIdempotencyKeyResponse> {
        let path = "/v2/payments/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CancelPaymentByIdempotencyKeyResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     CompletePayment
     - parameter paymentId: (path) Unique ID identifying the payment to be completed. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func completePayment(paymentId: String, completion: @escaping ((_ data: CompletePaymentResponse?,_ error: Error?) -> Void)) {
        completePaymentWithRequestBuilder(paymentId: paymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CompletePayment
     - POST /v2/payments/{payment_id}/complete
     - Completes a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment,  you can complete the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "payment" : {
    "id" : "EdMl5lwmBxd3ZvsvinkAT5LtvaB",
    "created_at" : "2019-07-10T13:39:55.317Z",
    "updated_at" : "2019-07-10T13:40:05.982Z",
    "amount_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "app_fee_money" : {
      "amount" : 10,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "status" : "COMPLETED",
    "source_type" : "CARD",
    "card_details" : {
      "status" : "CAPTURED",
      "card" : {
        "card_brand" : "VISA",
        "last_4" : "2796",
        "exp_month" : 7,
        "exp_year" : 2026,
        "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw"
      },
      "entry_method" : "ON_FILE",
      "cvv_status" : "CVV_ACCEPTED",
      "avs_status" : "AVS_ACCEPTED",
      "auth_result_code" : "MhIjEN"
    },
    "location_id" : "XK3DBG77NJBFX",
    "order_id" : "iJbzEHMhcwydeLbN3Apg5ZAjGi4F",
    "reference_id" : "123456",
    "note" : "Brief description",
    "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8"
  }
}}]
     - parameter paymentId: (path) Unique ID identifying the payment to be completed. 

     - returns: RequestBuilder<CompletePaymentResponse> 
     */
    open class func completePaymentWithRequestBuilder(paymentId: String) -> RequestBuilder<CompletePaymentResponse> {
        var path = "/v2/payments/{payment_id}/complete"
        let paymentIdPreEscape = "\(paymentId)"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{payment_id}", with: paymentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CompletePaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     CreatePayment
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPayment(body: CreatePaymentRequest, completion: @escaping ((_ data: CreatePaymentResponse?,_ error: Error?) -> Void)) {
        createPaymentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreatePayment
     - POST /v2/payments
     - Charges a payment source, for example, a card  represented by customer's card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "payment" : {
    "id" : "iqrBxAil6rmDtr7cak9g9WO8uaB",
    "created_at" : "2019-07-10T13:23:49.154Z",
    "updated_at" : "2019-07-10T13:23:49.446Z",
    "amount_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "app_fee_money" : {
      "amount" : 10,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "status" : "COMPLETED",
    "source_type" : "CARD",
    "card_details" : {
      "status" : "CAPTURED",
      "card" : {
        "card_brand" : "VISA",
        "last_4" : "2796",
        "exp_month" : 7,
        "exp_year" : 2026,
        "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw"
      },
      "entry_method" : "ON_FILE",
      "cvv_status" : "CVV_ACCEPTED",
      "avs_status" : "AVS_ACCEPTED",
      "auth_result_code" : "nsAyY2"
    },
    "location_id" : "XK3DBG77NJBFX",
    "order_id" : "qHkNOb03hMgEgoP3gyzFBDY3cg4F",
    "reference_id" : "123456",
    "note" : "Brief description",
    "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<CreatePaymentResponse> 
     */
    open class func createPaymentWithRequestBuilder(body: CreatePaymentRequest) -> RequestBuilder<CreatePaymentResponse> {
        let path = "/v2/payments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreatePaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     GetPayment
     - parameter paymentId: (path) Unique ID for the desired &#x60;Payment&#x60;. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPayment(paymentId: String, completion: @escaping ((_ data: GetPaymentResponse?,_ error: Error?) -> Void)) {
        getPaymentWithRequestBuilder(paymentId: paymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     GetPayment
     - GET /v2/payments/{payment_id}
     - Retrieves details for a specific Payment.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "payment" : {
    "id" : "iqrBxAil6rmDtr7cak9g9WO8uaB",
    "created_at" : "2019-07-10T13:23:49.154Z",
    "updated_at" : "2019-07-10T13:23:49.446Z",
    "amount_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "app_fee_money" : {
      "amount" : 10,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 200,
      "currency" : "USD"
    },
    "status" : "COMPLETED",
    "source_type" : "CARD",
    "card_details" : {
      "status" : "CAPTURED",
      "card" : {
        "card_brand" : "VISA",
        "last_4" : "2796",
        "exp_month" : 7,
        "exp_year" : 2026,
        "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw"
      },
      "entry_method" : "ON_FILE",
      "cvv_status" : "CVV_ACCEPTED",
      "avs_status" : "AVS_ACCEPTED",
      "auth_result_code" : "nsAyY2"
    },
    "location_id" : "XK3DBG77NJBFX",
    "order_id" : "qHkNOb03hMgEgoP3gyzFBDY3cg4F",
    "reference_id" : "123456",
    "note" : "Brief description",
    "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
    "processing_fee" : [ {
      "effective_at" : "2019-07-10T15:23:49.000Z",
      "type" : "INITIAL",
      "amount_money" : {
        "amount" : 36,
        "currency" : "USD"
      }
    } ]
  }
}}]
     - parameter paymentId: (path) Unique ID for the desired &#x60;Payment&#x60;. 

     - returns: RequestBuilder<GetPaymentResponse> 
     */
    open class func getPaymentWithRequestBuilder(paymentId: String) -> RequestBuilder<GetPaymentResponse> {
        var path = "/v2/payments/{payment_id}"
        let paymentIdPreEscape = "\(paymentId)"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{payment_id}", with: paymentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListPayments
     - parameter beginTime: (query) Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)     - parameter endTime: (query) Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)     - parameter sortOrder: (query) The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)     - parameter locationId: (query) ID of location associated with payment (optional)     - parameter total: (query) The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)     - parameter last4: (query) The last 4 digits of &#x60;Payment&#x60; card. (optional)     - parameter cardBrand: (query) The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPayments(beginTime: String? = nil, endTime: String? = nil, sortOrder: String? = nil, cursor: String? = nil, locationId: String? = nil, total: Int64? = nil, last4: String? = nil, cardBrand: String? = nil, completion: @escaping ((_ data: ListPaymentsResponse?,_ error: Error?) -> Void)) {
        listPaymentsWithRequestBuilder(beginTime: beginTime, endTime: endTime, sortOrder: sortOrder, cursor: cursor, locationId: locationId, total: total, last4: last4, cardBrand: cardBrand).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListPayments
     - GET /v2/payments
     - Retrieves a list of payments taken by the account making the request.  Max results per page: 100
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "payments" : [ {
    "id" : "6SRrImjQGn8FuzIsURiN677CwaB",
    "created_at" : "2019-07-09T14:36:13.745Z",
    "updated_at" : "2019-07-09T14:36:13.883Z",
    "amount_money" : {
      "amount" : 1000,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 1000,
      "currency" : "USD"
    },
    "status" : "APPROVED",
    "source_type" : "CARD",
    "card_details" : {
      "status" : "AUTHORIZED",
      "card" : {
        "card_brand" : "VISA",
        "last_4" : "1111",
        "exp_month" : 2,
        "exp_year" : 2022,
        "fingerprint" : "sq-1-lHpUJIUyqOPQmH89b6GuQEljmc-mZmu4kSTaMlkLDkJI7NVjAl4Zirn2sk3OeyVKVA"
      },
      "entry_method" : "KEYED",
      "cvv_status" : "CVV_ACCEPTED",
      "avs_status" : "AVS_ACCEPTED",
      "auth_result_code" : "NQbV3A"
    },
    "location_id" : "XK3DBG77NJBFX",
    "order_id" : "EM6qWxDd7RSy5udzjXktPw3PJa4F"
  }, {
    "id" : "MRWmTKxBDNRgwfNSZptAO76xuaB",
    "created_at" : "2019-07-08T01:00:51.607Z",
    "updated_at" : "2019-07-08T01:13:58.508Z",
    "amount_money" : {
      "amount" : 1000,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 1000,
      "currency" : "USD"
    },
    "status" : "COMPLETED",
    "source_type" : "CARD",
    "card_details" : {
      "status" : "CAPTURED",
      "card" : {
        "card_brand" : "VISA",
        "last_4" : "2796",
        "exp_month" : 7,
        "exp_year" : 2026,
        "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw"
      },
      "entry_method" : "ON_FILE",
      "cvv_status" : "CVV_ACCEPTED",
      "avs_status" : "AVS_ACCEPTED",
      "auth_result_code" : "vPIr0K"
    },
    "location_id" : "XK3DBG77NJBFX",
    "order_id" : "OVE4bJyb4B6bGFwMYEtVdfE4ge4F",
    "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
    "processing_fee" : [ {
      "effective_at" : "2019-07-08T03:00:53.000Z",
      "type" : "INITIAL",
      "amount_money" : {
        "amount" : 59,
        "currency" : "USD"
      }
    } ]
  } ],
  "cursor" : "Q2g4SUF4SWJUVkpYYlZSTGVFSkVUbEpuZDJaT1UxcHdkRUZQTnpaNGRXRkNFSmVJNVBpOExRPT0"
}}]
     - parameter beginTime: (query) Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)     - parameter endTime: (query) Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)     - parameter sortOrder: (query) The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)     - parameter locationId: (query) ID of location associated with payment (optional)     - parameter total: (query) The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)     - parameter last4: (query) The last 4 digits of &#x60;Payment&#x60; card. (optional)     - parameter cardBrand: (query) The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)

     - returns: RequestBuilder<ListPaymentsResponse> 
     */
    open class func listPaymentsWithRequestBuilder(beginTime: String? = nil, endTime: String? = nil, sortOrder: String? = nil, cursor: String? = nil, locationId: String? = nil, total: Int64? = nil, last4: String? = nil, cardBrand: String? = nil) -> RequestBuilder<ListPaymentsResponse> {
        let path = "/v2/payments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "begin_time": beginTime, 
                        "end_time": endTime, 
                        "sort_order": sortOrder, 
                        "cursor": cursor, 
                        "location_id": locationId, 
                        "total": total?.encodeToJSON(), 
                        "last_4": last4, 
                        "card_brand": cardBrand
        ])

        let requestBuilder: RequestBuilder<ListPaymentsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
