//
// CustomersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CustomersAPI {
    /**
     CreateCustomer
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCustomer(body: CreateCustomerRequest, completion: @escaping ((_ data: CreateCustomerResponse?,_ error: Error?) -> Void)) {
        createCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreateCustomer
     - POST /v2/customers
     - Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "customer" : {
    "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
    "created_at" : "2016-03-23T20:21:54.859Z",
    "updated_at" : "2016-03-23T20:21:54.859Z",
    "given_name" : "Amelia",
    "family_name" : "Earhart",
    "email_address" : "Amelia.Earhart@example.com",
    "address" : {
      "address_line_1" : "500 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    },
    "phone_number" : "1-212-555-4240",
    "reference_id" : "YOUR_REFERENCE_ID",
    "note" : "a customer"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<CreateCustomerResponse> 
     */
    open class func createCustomerWithRequestBuilder(body: CreateCustomerRequest) -> RequestBuilder<CreateCustomerResponse> {
        let path = "/v2/customers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateCustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     CreateCustomerCard
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter customerId: (path) The Square ID of the customer profile the card is linked to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCustomerCard(body: CreateCustomerCardRequest, customerId: String, completion: @escaping ((_ data: CreateCustomerCardResponse?,_ error: Error?) -> Void)) {
        createCustomerCardWithRequestBuilder(body: body, customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreateCustomerCard
     - POST /v2/customers/{customer_id}/cards
     - Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "card" : {
    "id" : "icard-card_id",
    "card_brand" : "VISA",
    "last_4" : "1111",
    "exp_month" : 11,
    "exp_year" : 2018,
    "cardholder_name" : "Amelia Earhart",
    "billing_address" : {
      "address_line_1" : "500 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    }
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter customerId: (path) The Square ID of the customer profile the card is linked to. 

     - returns: RequestBuilder<CreateCustomerCardResponse> 
     */
    open class func createCustomerCardWithRequestBuilder(body: CreateCustomerCardRequest, customerId: String) -> RequestBuilder<CreateCustomerCardResponse> {
        var path = "/v2/customers/{customer_id}/cards"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateCustomerCardResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     DeleteCustomer
     - parameter customerId: (path) The ID of the customer to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCustomer(customerId: String, completion: @escaping ((_ data: DeleteCustomerResponse?,_ error: Error?) -> Void)) {
        deleteCustomerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     DeleteCustomer
     - DELETE /v2/customers/{customer_id}
     - Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter customerId: (path) The ID of the customer to delete. 

     - returns: RequestBuilder<DeleteCustomerResponse> 
     */
    open class func deleteCustomerWithRequestBuilder(customerId: String) -> RequestBuilder<DeleteCustomerResponse> {
        var path = "/v2/customers/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteCustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     DeleteCustomerCard
     - parameter customerId: (path) The ID of the customer that the card on file belongs to.      - parameter cardId: (path) The ID of the card on file to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCustomerCard(customerId: String, cardId: String, completion: @escaping ((_ data: DeleteCustomerCardResponse?,_ error: Error?) -> Void)) {
        deleteCustomerCardWithRequestBuilder(customerId: customerId, cardId: cardId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     DeleteCustomerCard
     - DELETE /v2/customers/{customer_id}/cards/{card_id}
     - Removes a card on file from a customer.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={ }}]
     - parameter customerId: (path) The ID of the customer that the card on file belongs to.      - parameter cardId: (path) The ID of the card on file to delete. 

     - returns: RequestBuilder<DeleteCustomerCardResponse> 
     */
    open class func deleteCustomerCardWithRequestBuilder(customerId: String, cardId: String) -> RequestBuilder<DeleteCustomerCardResponse> {
        var path = "/v2/customers/{customer_id}/cards/{card_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let cardIdPreEscape = "\(cardId)"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteCustomerCardResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ListCustomers
     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)     - parameter sortField: (query) Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)     - parameter sortOrder: (query) Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listCustomers(cursor: String? = nil, sortField: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: ListCustomersResponse?,_ error: Error?) -> Void)) {
        listCustomersWithRequestBuilder(cursor: cursor, sortField: sortField, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListCustomers
     - GET /v2/customers
     - Lists a business's customers.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "customers" : [ {
    "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
    "created_at" : "2016-03-23T20:21:54.859Z",
    "updated_at" : "2016-03-23T20:21:55Z",
    "given_name" : "Amelia",
    "family_name" : "Earhart",
    "email_address" : "Amelia.Earhart@example.com",
    "address" : {
      "address_line_1" : "500 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    },
    "phone_number" : "1-212-555-4240",
    "reference_id" : "YOUR_REFERENCE_ID",
    "note" : "a customer",
    "groups" : [ {
      "id" : "16894e93-96eb-4ced-b24b-f71d42bf084c",
      "name" : "Aviation Enthusiasts"
    } ]
  } ]
}}]
     - parameter cursor: (query) A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)     - parameter sortField: (query) Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)     - parameter sortOrder: (query) Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)

     - returns: RequestBuilder<ListCustomersResponse> 
     */
    open class func listCustomersWithRequestBuilder(cursor: String? = nil, sortField: String? = nil, sortOrder: String? = nil) -> RequestBuilder<ListCustomersResponse> {
        let path = "/v2/customers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cursor": cursor, 
                        "sort_field": sortField, 
                        "sort_order": sortOrder
        ])

        let requestBuilder: RequestBuilder<ListCustomersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     RetrieveCustomer
     - parameter customerId: (path) The ID of the customer to retrieve. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveCustomer(customerId: String, completion: @escaping ((_ data: RetrieveCustomerResponse?,_ error: Error?) -> Void)) {
        retrieveCustomerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     RetrieveCustomer
     - GET /v2/customers/{customer_id}
     - Returns details for a single customer.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "customer" : {
    "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
    "created_at" : "2016-03-23T20:21:54.859Z",
    "updated_at" : "2016-03-23T20:21:54.859Z",
    "given_name" : "Amelia",
    "family_name" : "Earhart",
    "email_address" : "Amelia.Earhart@example.com",
    "address" : {
      "address_line_1" : "500 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    },
    "phone_number" : "1-212-555-4240",
    "reference_id" : "YOUR_REFERENCE_ID",
    "note" : "a customer",
    "groups" : [ {
      "id" : "16894e93-96eb-4ced-b24b-f71d42bf084c",
      "name" : "Aviation Enthusiasts"
    } ]
  }
}}]
     - parameter customerId: (path) The ID of the customer to retrieve. 

     - returns: RequestBuilder<RetrieveCustomerResponse> 
     */
    open class func retrieveCustomerWithRequestBuilder(customerId: String) -> RequestBuilder<RetrieveCustomerResponse> {
        var path = "/v2/customers/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RetrieveCustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     SearchCustomers
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchCustomers(body: SearchCustomersRequest, completion: @escaping ((_ data: SearchCustomersResponse?,_ error: Error?) -> Void)) {
        searchCustomersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     SearchCustomers
     - POST /v2/customers/search
     - Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "customers" : [ {
    "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
    "created_at" : "2018-01-23T20:21:54.859Z",
    "updated_at" : "2018-04-20T10:02:43.083Z",
    "given_name" : "James",
    "family_name" : "Bond",
    "email_address" : "james.bond@example.com",
    "address" : {
      "address_line_1" : "505 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    },
    "phone_number" : "1-212-555-4250",
    "reference_id" : "YOUR_REFERENCE_ID_2",
    "creation_source" : "THIRD_PARTY"
  }, {
    "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
    "created_at" : "2018-01-30T14:10:54.859Z",
    "updated_at" : "2018-03-08T18:25:54.859Z",
    "given_name" : "Amelia",
    "family_name" : "Earhart",
    "email_address" : "amelia.earhart@example.com",
    "address" : {
      "address_line_1" : "500 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    },
    "phone_number" : "1-212-555-4240",
    "reference_id" : "YOUR_REFERENCE_ID_1",
    "note" : "a customer",
    "creation_source" : "THIRD_PARTY"
  } ],
  "cursor" : "9dpS093Uy12AzeE"
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<SearchCustomersResponse> 
     */
    open class func searchCustomersWithRequestBuilder(body: SearchCustomersRequest) -> RequestBuilder<SearchCustomersResponse> {
        let path = "/v2/customers/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchCustomersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateCustomer
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter customerId: (path) The ID of the customer to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCustomer(body: UpdateCustomerRequest, customerId: String, completion: @escaping ((_ data: UpdateCustomerResponse?,_ error: Error?) -> Void)) {
        updateCustomerWithRequestBuilder(body: body, customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateCustomer
     - PUT /v2/customers/{customer_id}
     - Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "customer" : {
    "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
    "created_at" : "2016-03-23T20:21:54.859Z",
    "updated_at" : "2016-03-25T20:21:55Z",
    "given_name" : "Amelia",
    "family_name" : "Earhart",
    "email_address" : "New.Amelia.Earhart@example.com",
    "address" : {
      "address_line_1" : "500 Electric Ave",
      "address_line_2" : "Suite 600",
      "locality" : "New York",
      "administrative_district_level_1" : "NY",
      "postal_code" : "10003",
      "country" : "US"
    },
    "reference_id" : "YOUR_REFERENCE_ID",
    "note" : "updated customer note",
    "groups" : [ {
      "id" : "16894e93-96eb-4ced-b24b-f71d42bf084c",
      "name" : "Aviation Enthusiasts"
    } ]
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter customerId: (path) The ID of the customer to update. 

     - returns: RequestBuilder<UpdateCustomerResponse> 
     */
    open class func updateCustomerWithRequestBuilder(body: UpdateCustomerRequest, customerId: String) -> RequestBuilder<UpdateCustomerResponse> {
        var path = "/v2/customers/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateCustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
