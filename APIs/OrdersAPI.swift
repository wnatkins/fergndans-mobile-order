//
// OrdersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrdersAPI {
    /**
     BatchRetrieveOrders
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the orders&#x27; associated location. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchRetrieveOrders(body: BatchRetrieveOrdersRequest, locationId: String, completion: @escaping ((_ data: BatchRetrieveOrdersResponse?,_ error: Error?) -> Void)) {
        batchRetrieveOrdersWithRequestBuilder(body: body, locationId: locationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     BatchRetrieveOrders
     - POST /v2/locations/{location_id}/orders/batch-retrieve
     - Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "orders" : [ {
    "id" : "CAISEM82RcpmcFBM0TfOyiHV3es",
    "location_id" : "057P5VYJ4A5X1",
    "reference_id" : "my-order-001",
    "line_items" : [ {
      "uid" : "945986d1-9586-11e6-ad5a-28cfe92138cf",
      "name" : "Awesome product",
      "quantity" : "1",
      "base_price_money" : {
        "amount" : 1599,
        "currency" : "USD"
      },
      "total_money" : {
        "amount" : 1599,
        "currency" : "USD"
      }
    }, {
      "uid" : "a8f4168c-9586-11e6-bdf0-28cfe92138cf",
      "name" : "Another awesome product",
      "quantity" : "3",
      "base_price_money" : {
        "amount" : 2000,
        "currency" : "USD"
      },
      "total_money" : {
        "amount" : 6000,
        "currency" : "USD"
      }
    } ],
    "total_money" : {
      "amount" : 7599,
      "currency" : "USD"
    }
  } ]
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the orders&#x27; associated location. 

     - returns: RequestBuilder<BatchRetrieveOrdersResponse> 
     */
    open class func batchRetrieveOrdersWithRequestBuilder(body: BatchRetrieveOrdersRequest, locationId: String) -> RequestBuilder<BatchRetrieveOrdersResponse> {
        var path = "/v2/locations/{location_id}/orders/batch-retrieve"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchRetrieveOrdersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     CreateOrder
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the business location to associate the order with. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOrder(body: CreateOrderRequest, locationId: String, completion: @escaping ((_ data: CreateOrderResponse?,_ error: Error?) -> Void)) {
        createOrderWithRequestBuilder(body: body, locationId: locationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     CreateOrder
     - POST /v2/locations/{location_id}/orders
     - Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.  To learn more about the Orders API, see the [Orders API Overview](/orders-api/what-it-does).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "order" : {
    "id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
    "location_id" : "LOCATION_ID",
    "line_items" : [ {
      "name" : "New York Strip Steak",
      "quantity" : "1",
      "taxes" : [ {
        "name" : "State Sales Tax",
        "type" : "ADDITIVE",
        "percentage" : "9",
        "applied_money" : {
          "amount" : 136,
          "currency" : "USD"
        }
      } ],
      "discounts" : [ {
        "catalog_object_id" : "DB7L55ZH2BGWI4H23ULIWOQ7",
        "name" : "Membership Discount",
        "type" : "FIXED_PERCENTAGE",
        "percentage" : "0.5",
        "applied_money" : {
          "amount" : 8,
          "currency" : "USD"
        },
        "scope" : "ORDER"
      }, {
        "name" : "Labor Day Sale",
        "type" : "FIXED_PERCENTAGE",
        "percentage" : "5",
        "applied_money" : {
          "amount" : 79,
          "currency" : "USD"
        },
        "scope" : "ORDER"
      } ],
      "base_price_money" : {
        "amount" : 1599,
        "currency" : "USD"
      },
      "gross_sales_money" : {
        "amount" : 1599,
        "currency" : "USD"
      },
      "total_tax_money" : {
        "amount" : 136,
        "currency" : "USD"
      },
      "total_discount_money" : {
        "amount" : 87,
        "currency" : "USD"
      },
      "total_money" : {
        "amount" : 1648,
        "currency" : "USD"
      }
    }, {
      "name" : "New York Steak",
      "quantity" : "2",
      "catalog_object_id" : "BEMYCSMIJL46OCDV4KYIKXIB",
      "variation_name" : "Larger",
      "modifiers" : [ {
        "catalog_object_id" : "CHQX7Y4KY6N5KINJKZCFURPZ",
        "name" : "Well",
        "base_price_money" : {
          "amount" : 50,
          "currency" : "USD"
        },
        "total_price_money" : {
          "amount" : 100,
          "currency" : "USD"
        }
      } ],
      "taxes" : [ {
        "name" : "State Sales Tax",
        "type" : "ADDITIVE",
        "percentage" : "9",
        "applied_money" : {
          "amount" : 374,
          "currency" : "USD"
        }
      } ],
      "discounts" : [ {
        "catalog_object_id" : "DB7L55ZH2BGWI4H23ULIWOQ7",
        "name" : "Membership Discount",
        "type" : "FIXED_PERCENTAGE",
        "percentage" : "0.5",
        "applied_money" : {
          "amount" : 22,
          "currency" : "USD"
        },
        "scope" : "ORDER"
      }, {
        "name" : "Labor Day Sale",
        "type" : "FIXED_PERCENTAGE",
        "percentage" : "5",
        "applied_money" : {
          "amount" : 224,
          "currency" : "USD"
        },
        "scope" : "ORDER"
      }, {
        "name" : "Sale - $1.00 off",
        "type" : "FIXED_AMOUNT",
        "amount_money" : {
          "amount" : 100,
          "currency" : "USD"
        },
        "applied_money" : {
          "amount" : 100,
          "currency" : "USD"
        },
        "scope" : "LINE_ITEM"
      } ],
      "base_price_money" : {
        "amount" : 2200,
        "currency" : "USD"
      },
      "gross_sales_money" : {
        "amount" : 4500,
        "currency" : "USD"
      },
      "total_tax_money" : {
        "amount" : 374,
        "currency" : "USD"
      },
      "total_discount_money" : {
        "amount" : 346,
        "currency" : "USD"
      },
      "total_money" : {
        "amount" : 4528,
        "currency" : "USD"
      }
    } ],
    "taxes" : [ {
      "name" : "State Sales Tax",
      "type" : "ADDITIVE",
      "percentage" : "9",
      "applied_money" : {
        "amount" : 510,
        "currency" : "USD"
      },
      "scope" : "ORDER"
    } ],
    "discounts" : [ {
      "catalog_object_id" : "DB7L55ZH2BGWI4H23ULIWOQ7",
      "name" : "Membership Discount",
      "type" : "FIXED_PERCENTAGE",
      "percentage" : "0.5",
      "applied_money" : {
        "amount" : 30,
        "currency" : "USD"
      },
      "scope" : "ORDER"
    }, {
      "name" : "Labor Day Sale",
      "type" : "FIXED_PERCENTAGE",
      "percentage" : "5",
      "applied_money" : {
        "amount" : 303,
        "currency" : "USD"
      },
      "scope" : "ORDER"
    }, {
      "name" : "Sale - $1.00 off",
      "type" : "FIXED_AMOUNT",
      "amount_money" : {
        "amount" : 100,
        "currency" : "USD"
      },
      "applied_money" : {
        "amount" : 100,
        "currency" : "USD"
      },
      "scope" : "LINE_ITEM"
    } ],
    "total_money" : {
      "amount" : 6176,
      "currency" : "USD"
    },
    "total_tax_money" : {
      "amount" : 510,
      "currency" : "USD"
    },
    "total_discount_money" : {
      "amount" : 433,
      "currency" : "USD"
    }
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter locationId: (path) The ID of the business location to associate the order with. 

     - returns: RequestBuilder<CreateOrderResponse> 
     */
    open class func createOrderWithRequestBuilder(body: CreateOrderRequest, locationId: String) -> RequestBuilder<CreateOrderResponse> {
        var path = "/v2/locations/{location_id}/orders"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{location_id}", with: locationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateOrderResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: ["Authorization":"Bearer EAAAEK754cIjm_WmdJNcga3LJqdbna61-Cu09f0KDfxlDQaVXmchdPu8konZQSeN", "Content-Type":"application/json"])
    }

    /**
     PayOrder
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter orderId: (path) The ID of the order being paid. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func payOrder(body: PayOrderRequest, orderId: String, completion: @escaping ((_ data: PayOrderResponse?,_ error: Error?) -> Void)) {
        payOrderWithRequestBuilder(body: body, orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     PayOrder
     - POST /v2/orders/{order_id}/pay
     - Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.  Learn how to [pay for orders with a single payment using the Payments API](/orders-api/pay-for-orders).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "order" : {
    "id" : "lgwOlEityYPJtcuvKTVKT1pA986YY",
    "location_id" : "P3CCK6HSNDAS7",
    "line_items" : [ {
      "uid" : "QW6kofLHJK7JEKMjlSVP5C",
      "quantity" : "1",
      "name" : "Item 1",
      "base_price_money" : {
        "amount" : 500,
        "currency" : "USD"
      },
      "gross_sales_money" : {
        "amount" : 500,
        "currency" : "USD"
      },
      "total_tax_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "total_discount_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "total_money" : {
        "amount" : 500,
        "currency" : "USD"
      }
    }, {
      "uid" : "zhw8MNfRGdFQMI2WE1UBJD",
      "quantity" : "2",
      "name" : "Item 2",
      "base_price_money" : {
        "amount" : 750,
        "currency" : "USD"
      },
      "gross_sales_money" : {
        "amount" : 1500,
        "currency" : "USD"
      },
      "total_tax_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "total_discount_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "total_money" : {
        "amount" : 1500,
        "currency" : "USD"
      }
    } ],
    "created_at" : "2019-08-06T02:47:35.693Z",
    "updated_at" : "2019-08-06T02:47:37.140Z",
    "version" : 4,
    "total_tax_money" : {
      "amount" : 0,
      "currency" : "USD"
    },
    "total_discount_money" : {
      "amount" : 0,
      "currency" : "USD"
    },
    "total_money" : {
      "amount" : 2000,
      "currency" : "USD"
    },
    "closed_at" : "2019-08-06T02:47:37.140Z",
    "tenders" : [ {
      "id" : "EnZdNAlWCmfh6Mt5FMNST1o7taB",
      "location_id" : "P3CCK6HSNDAS7",
      "transaction_id" : "lgwOlEityYPJtcuvKTVKT1pA986YY",
      "created_at" : "2019-08-06T02:47:36.293Z",
      "amount_money" : {
        "amount" : 1000,
        "currency" : "USD"
      },
      "type" : "CARD",
      "card_details" : {
        "status" : "CAPTURED",
        "card" : {
          "card_brand" : "VISA",
          "last_4" : "1111",
          "exp_month" : 2,
          "exp_year" : 2022,
          "fingerprint" : "sq-1-n_BL15KP87ClDa4-h2nXOI0fp5VnxNH6hfhzqhptTfAgxgLuGFcg6jIPngDz4IkkTQ"
        },
        "entry_method" : "KEYED"
      },
      "payment_id" : "EnZdNAlWCmfh6Mt5FMNST1o7taB"
    }, {
      "id" : "0LRiVlbXVwe8ozu4KbZxd12mvaB",
      "location_id" : "P3CCK6HSNDAS7",
      "transaction_id" : "lgwOlEityYPJtcuvKTVKT1pA986YY",
      "created_at" : "2019-08-06T02:47:36.809Z",
      "amount_money" : {
        "amount" : 1000,
        "currency" : "USD"
      },
      "type" : "CARD",
      "card_details" : {
        "status" : "CAPTURED",
        "card" : {
          "card_brand" : "VISA",
          "last_4" : "1111",
          "exp_month" : 2,
          "exp_year" : 2022,
          "fingerprint" : "sq-1-n_BL15KP87ClDa4-h2nXOI0fp5VnxNH6hfhzqhptTfAgxgLuGFcg6jIPngDz4IkkTQ"
        },
        "entry_method" : "KEYED"
      },
      "payment_id" : "0LRiVlbXVwe8ozu4KbZxd12mvaB"
    } ],
    "total_service_charge_money" : {
      "amount" : 0,
      "currency" : "USD"
    },
    "net_amounts" : {
      "total_money" : {
        "amount" : 2000,
        "currency" : "USD"
      },
      "tax_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "discount_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "tip_money" : {
        "amount" : 0,
        "currency" : "USD"
      },
      "service_charge_money" : {
        "amount" : 0,
        "currency" : "USD"
      }
    },
    "source" : {
      "name" : "Source Name"
    },
    "state" : "COMPLETED"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details.      - parameter orderId: (path) The ID of the order being paid. 

     - returns: RequestBuilder<PayOrderResponse> 
     */
    open class func payOrderWithRequestBuilder(body: PayOrderRequest, orderId: String) -> RequestBuilder<PayOrderResponse> {
        var path = "/v2/orders/{order_id}/pay"
        let orderIdPreEscape = "\(orderId)"
        let orderIdPostEscape = orderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{order_id}", with: orderIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PayOrderResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     SearchOrders
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchOrders(body: SearchOrdersRequest, completion: @escaping ((_ data: SearchOrdersResponse?,_ error: Error?) -> Void)) {
        searchOrdersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     SearchOrders
     - POST /v2/orders/search
     - Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "order_entries" : [ {
    "order_id" : "CAISEM82RcpmcFBM0TfOyiHV3es",
    "location_id" : "057P5VYJ4A5X1",
    "version" : 1
  }, {
    "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
    "location_id" : "18YC4JDH91E1H"
  }, {
    "order_id" : "CAISEM52YcpmcWAzERDOyiWS3ty",
    "location_id" : "057P5VYJ4A5X1"
  } ],
  "cursor" : "123"
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<SearchOrdersResponse> 
     */
    open class func searchOrdersWithRequestBuilder(body: SearchOrdersRequest) -> RequestBuilder<SearchOrdersResponse> {
        let path = "/v2/orders/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchOrdersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     UpdateOrder
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOrder(body: UpdateOrderRequest, completion: @escaping ((_ data: UpdateOrderResponse?,_ error: Error?) -> Void)) {
        updateOrderWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     UpdateOrder
     - PUT /v2/locations/{location_id}/orders/{order_id}
     - Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  To learn more about the Orders API, see the [Orders API Overview](/orders-api/what-it-does).
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "errors" : [ {
    "code" : "code",
    "field" : "field",
    "detail" : "detail",
    "category" : "category"
  }, {
    "code" : "code",
    "field" : "field",
    "detail" : "detail",
    "category" : "category"
  } ],
  "order" : {
    "reference_id" : "reference_id",
    "taxes" : [ null, null ],
    "created_at" : "created_at",
    "source" : {
      "name" : "name"
    },
    "line_items" : [ {
      "quantity_unit" : {
        "precision" : 0,
        "measurement_unit" : {
          "volume_unit" : "volume_unit",
          "weight_unit" : "weight_unit",
          "generic_unit" : "generic_unit",
          "area_unit" : "area_unit",
          "type" : "type",
          "custom_unit" : {
            "name" : "name",
            "abbreviation" : "abbreviation"
          },
          "length_unit" : "length_unit"
        }
      },
      "note" : "note",
      "catalog_object_id" : "catalog_object_id",
      "quantity" : "quantity",
      "variation_name" : "variation_name",
      "taxes" : [ {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      }, {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      } ],
      "modifiers" : [ {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "base_price_money" : {
          "amount" : 6,
          "currency" : "currency"
        },
        "name" : "name"
      }, {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "base_price_money" : {
          "amount" : 6,
          "currency" : "currency"
        },
        "name" : "name"
      } ],
      "uid" : "uid",
      "discounts" : [ {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      }, {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      } ],
      "name" : "name",
      "applied_taxes" : [ {
        "uid" : "uid",
        "tax_uid" : "tax_uid"
      }, {
        "uid" : "uid",
        "tax_uid" : "tax_uid"
      } ],
      "applied_discounts" : [ {
        "uid" : "uid",
        "discount_uid" : "discount_uid"
      }, {
        "uid" : "uid",
        "discount_uid" : "discount_uid"
      } ]
    }, {
      "quantity_unit" : {
        "precision" : 0,
        "measurement_unit" : {
          "volume_unit" : "volume_unit",
          "weight_unit" : "weight_unit",
          "generic_unit" : "generic_unit",
          "area_unit" : "area_unit",
          "type" : "type",
          "custom_unit" : {
            "name" : "name",
            "abbreviation" : "abbreviation"
          },
          "length_unit" : "length_unit"
        }
      },
      "note" : "note",
      "catalog_object_id" : "catalog_object_id",
      "quantity" : "quantity",
      "variation_name" : "variation_name",
      "taxes" : [ {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      }, {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      } ],
      "modifiers" : [ {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "base_price_money" : {
          "amount" : 6,
          "currency" : "currency"
        },
        "name" : "name"
      }, {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "base_price_money" : {
          "amount" : 6,
          "currency" : "currency"
        },
        "name" : "name"
      } ],
      "uid" : "uid",
      "discounts" : [ {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      }, {
        "uid" : "uid",
        "catalog_object_id" : "catalog_object_id",
        "percentage" : "percentage",
        "scope" : "scope",
        "name" : "name",
        "type" : "type"
      } ],
      "name" : "name",
      "applied_taxes" : [ {
        "uid" : "uid",
        "tax_uid" : "tax_uid"
      }, {
        "uid" : "uid",
        "tax_uid" : "tax_uid"
      } ],
      "applied_discounts" : [ {
        "uid" : "uid",
        "discount_uid" : "discount_uid"
      }, {
        "uid" : "uid",
        "discount_uid" : "discount_uid"
      } ]
    } ],
    "location_id" : "location_id",
    "refunds" : [ {
      "transaction_id" : "transaction_id",
      "reason" : "reason",
      "tender_id" : "tender_id",
      "created_at" : "created_at",
      "id" : "id",
      "additional_recipients" : [ null, null ],
      "location_id" : "location_id",
      "status" : "status"
    }, {
      "transaction_id" : "transaction_id",
      "reason" : "reason",
      "tender_id" : "tender_id",
      "created_at" : "created_at",
      "id" : "id",
      "additional_recipients" : [ null, null ],
      "location_id" : "location_id",
      "status" : "status"
    } ],
    "fulfillments" : [ {
      "uid" : "uid",
      "pickup_details" : {
        "note" : "note",
        "schedule_type" : "schedule_type",
        "rejected_at" : "rejected_at",
        "pickup_at" : "pickup_at",
        "canceled_at" : "canceled_at",
        "pickup_window_duration" : "pickup_window_duration",
        "expired_at" : "expired_at",
        "placed_at" : "placed_at",
        "accepted_at" : "accepted_at",
        "cancel_reason" : "cancel_reason",
        "expires_at" : "expires_at",
        "ready_at" : "ready_at",
        "picked_up_at" : "picked_up_at",
        "recipient" : {
          "email_address" : "email_address",
          "address" : {
            "country" : "country",
            "administrative_district_level_3" : "administrative_district_level_3",
            "locality" : "locality",
            "sublocality" : "sublocality",
            "last_name" : "last_name",
            "administrative_district_level_2" : "administrative_district_level_2",
            "administrative_district_level_1" : "administrative_district_level_1",
            "sublocality_3" : "sublocality_3",
            "sublocality_2" : "sublocality_2",
            "organization" : "organization",
            "address_line_1" : "address_line_1",
            "address_line_3" : "address_line_3",
            "address_line_2" : "address_line_2",
            "postal_code" : "postal_code",
            "first_name" : "first_name"
          },
          "phone_number" : "phone_number",
          "customer_id" : "customer_id",
          "display_name" : "display_name"
        },
        "auto_complete_duration" : "auto_complete_duration",
        "prep_time_duration" : "prep_time_duration"
      },
      "shipment_details" : {
        "packaged_at" : "packaged_at",
        "shipped_at" : "shipped_at",
        "shipping_note" : "shipping_note",
        "expected_shipped_at" : "expected_shipped_at",
        "canceled_at" : "canceled_at",
        "shipping_type" : "shipping_type",
        "in_progress_at" : "in_progress_at",
        "failure_reason" : "failure_reason",
        "placed_at" : "placed_at",
        "carrier" : "carrier",
        "cancel_reason" : "cancel_reason",
        "tracking_number" : "tracking_number",
        "failed_at" : "failed_at",
        "tracking_url" : "tracking_url"
      },
      "state" : "state",
      "type" : "type"
    }, {
      "uid" : "uid",
      "pickup_details" : {
        "note" : "note",
        "schedule_type" : "schedule_type",
        "rejected_at" : "rejected_at",
        "pickup_at" : "pickup_at",
        "canceled_at" : "canceled_at",
        "pickup_window_duration" : "pickup_window_duration",
        "expired_at" : "expired_at",
        "placed_at" : "placed_at",
        "accepted_at" : "accepted_at",
        "cancel_reason" : "cancel_reason",
        "expires_at" : "expires_at",
        "ready_at" : "ready_at",
        "picked_up_at" : "picked_up_at",
        "recipient" : {
          "email_address" : "email_address",
          "address" : {
            "country" : "country",
            "administrative_district_level_3" : "administrative_district_level_3",
            "locality" : "locality",
            "sublocality" : "sublocality",
            "last_name" : "last_name",
            "administrative_district_level_2" : "administrative_district_level_2",
            "administrative_district_level_1" : "administrative_district_level_1",
            "sublocality_3" : "sublocality_3",
            "sublocality_2" : "sublocality_2",
            "organization" : "organization",
            "address_line_1" : "address_line_1",
            "address_line_3" : "address_line_3",
            "address_line_2" : "address_line_2",
            "postal_code" : "postal_code",
            "first_name" : "first_name"
          },
          "phone_number" : "phone_number",
          "customer_id" : "customer_id",
          "display_name" : "display_name"
        },
        "auto_complete_duration" : "auto_complete_duration",
        "prep_time_duration" : "prep_time_duration"
      },
      "shipment_details" : {
        "packaged_at" : "packaged_at",
        "shipped_at" : "shipped_at",
        "shipping_note" : "shipping_note",
        "expected_shipped_at" : "expected_shipped_at",
        "canceled_at" : "canceled_at",
        "shipping_type" : "shipping_type",
        "in_progress_at" : "in_progress_at",
        "failure_reason" : "failure_reason",
        "placed_at" : "placed_at",
        "carrier" : "carrier",
        "cancel_reason" : "cancel_reason",
        "tracking_number" : "tracking_number",
        "failed_at" : "failed_at",
        "tracking_url" : "tracking_url"
      },
      "state" : "state",
      "type" : "type"
    } ],
    "discounts" : [ null, null ],
    "updated_at" : "updated_at",
    "id" : "id",
    "state" : "state",
    "closed_at" : "closed_at",
    "service_charges" : [ {
      "uid" : "uid",
      "catalog_object_id" : "catalog_object_id",
      "calculation_phase" : "calculation_phase",
      "taxable" : true,
      "percentage" : "percentage",
      "name" : "name",
      "taxes" : [ null, null ],
      "applied_taxes" : [ null, null ]
    }, {
      "uid" : "uid",
      "catalog_object_id" : "catalog_object_id",
      "calculation_phase" : "calculation_phase",
      "taxable" : true,
      "percentage" : "percentage",
      "name" : "name",
      "taxes" : [ null, null ],
      "applied_taxes" : [ null, null ]
    } ],
    "version" : 5,
    "tenders" : [ {
      "transaction_id" : "transaction_id",
      "card_details" : {
        "entry_method" : "entry_method",
        "card" : {
          "last_4" : "last_4",
          "card_brand" : "card_brand",
          "fingerprint" : "fingerprint",
          "exp_month" : 1,
          "id" : "id",
          "exp_year" : 5,
          "cardholder_name" : "cardholder_name"
        },
        "status" : "status"
      },
      "note" : "note",
      "created_at" : "created_at",
      "type" : "type",
      "location_id" : "location_id",
      "payment_id" : "payment_id",
      "cash_details" : { },
      "id" : "id",
      "customer_id" : "customer_id",
      "additional_recipients" : [ {
        "receivable_id" : "receivable_id",
        "description" : "description",
        "location_id" : "location_id"
      }, {
        "receivable_id" : "receivable_id",
        "description" : "description",
        "location_id" : "location_id"
      } ]
    }, {
      "transaction_id" : "transaction_id",
      "card_details" : {
        "entry_method" : "entry_method",
        "card" : {
          "last_4" : "last_4",
          "card_brand" : "card_brand",
          "fingerprint" : "fingerprint",
          "exp_month" : 1,
          "id" : "id",
          "exp_year" : 5,
          "cardholder_name" : "cardholder_name"
        },
        "status" : "status"
      },
      "note" : "note",
      "created_at" : "created_at",
      "type" : "type",
      "location_id" : "location_id",
      "payment_id" : "payment_id",
      "cash_details" : { },
      "id" : "id",
      "customer_id" : "customer_id",
      "additional_recipients" : [ {
        "receivable_id" : "receivable_id",
        "description" : "description",
        "location_id" : "location_id"
      }, {
        "receivable_id" : "receivable_id",
        "description" : "description",
        "location_id" : "location_id"
      } ]
    } ],
    "returns" : [ {
      "uid" : "uid",
      "return_line_items" : [ {
        "note" : "note",
        "catalog_object_id" : "catalog_object_id",
        "source_line_item_uid" : "source_line_item_uid",
        "quantity" : "quantity",
        "variation_name" : "variation_name",
        "return_discounts" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        } ],
        "return_taxes" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        } ],
        "uid" : "uid",
        "return_modifiers" : [ {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        }, {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        } ],
        "name" : "name",
        "applied_taxes" : [ null, null ],
        "applied_discounts" : [ null, null ]
      }, {
        "note" : "note",
        "catalog_object_id" : "catalog_object_id",
        "source_line_item_uid" : "source_line_item_uid",
        "quantity" : "quantity",
        "variation_name" : "variation_name",
        "return_discounts" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        } ],
        "return_taxes" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        } ],
        "uid" : "uid",
        "return_modifiers" : [ {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        }, {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        } ],
        "name" : "name",
        "applied_taxes" : [ null, null ],
        "applied_discounts" : [ null, null ]
      } ],
      "rounding_adjustment" : {
        "uid" : "uid",
        "name" : "name"
      },
      "return_amounts" : { },
      "source_order_id" : "source_order_id",
      "return_service_charges" : [ {
        "catalog_object_id" : "catalog_object_id",
        "calculation_phase" : "calculation_phase",
        "taxable" : true,
        "source_service_charge_uid" : "source_service_charge_uid",
        "return_taxes" : [ null, null ],
        "uid" : "uid",
        "percentage" : "percentage",
        "name" : "name",
        "applied_taxes" : [ null, null ]
      }, {
        "catalog_object_id" : "catalog_object_id",
        "calculation_phase" : "calculation_phase",
        "taxable" : true,
        "source_service_charge_uid" : "source_service_charge_uid",
        "return_taxes" : [ null, null ],
        "uid" : "uid",
        "percentage" : "percentage",
        "name" : "name",
        "applied_taxes" : [ null, null ]
      } ],
      "return_discounts" : [ null, null ],
      "return_taxes" : [ null, null ]
    }, {
      "uid" : "uid",
      "return_line_items" : [ {
        "note" : "note",
        "catalog_object_id" : "catalog_object_id",
        "source_line_item_uid" : "source_line_item_uid",
        "quantity" : "quantity",
        "variation_name" : "variation_name",
        "return_discounts" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        } ],
        "return_taxes" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        } ],
        "uid" : "uid",
        "return_modifiers" : [ {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        }, {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        } ],
        "name" : "name",
        "applied_taxes" : [ null, null ],
        "applied_discounts" : [ null, null ]
      }, {
        "note" : "note",
        "catalog_object_id" : "catalog_object_id",
        "source_line_item_uid" : "source_line_item_uid",
        "quantity" : "quantity",
        "variation_name" : "variation_name",
        "return_discounts" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "source_discount_uid" : "source_discount_uid",
          "percentage" : "percentage",
          "scope" : "scope",
          "name" : "name",
          "type" : "type"
        } ],
        "return_taxes" : [ {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        }, {
          "uid" : "uid",
          "catalog_object_id" : "catalog_object_id",
          "percentage" : "percentage",
          "scope" : "scope",
          "source_tax_uid" : "source_tax_uid",
          "name" : "name",
          "type" : "type"
        } ],
        "uid" : "uid",
        "return_modifiers" : [ {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        }, {
          "uid" : "uid",
          "source_modifier_uid" : "source_modifier_uid",
          "catalog_object_id" : "catalog_object_id",
          "name" : "name"
        } ],
        "name" : "name",
        "applied_taxes" : [ null, null ],
        "applied_discounts" : [ null, null ]
      } ],
      "rounding_adjustment" : {
        "uid" : "uid",
        "name" : "name"
      },
      "return_amounts" : { },
      "source_order_id" : "source_order_id",
      "return_service_charges" : [ {
        "catalog_object_id" : "catalog_object_id",
        "calculation_phase" : "calculation_phase",
        "taxable" : true,
        "source_service_charge_uid" : "source_service_charge_uid",
        "return_taxes" : [ null, null ],
        "uid" : "uid",
        "percentage" : "percentage",
        "name" : "name",
        "applied_taxes" : [ null, null ]
      }, {
        "catalog_object_id" : "catalog_object_id",
        "calculation_phase" : "calculation_phase",
        "taxable" : true,
        "source_service_charge_uid" : "source_service_charge_uid",
        "return_taxes" : [ null, null ],
        "uid" : "uid",
        "percentage" : "percentage",
        "name" : "name",
        "applied_taxes" : [ null, null ]
      } ],
      "return_discounts" : [ null, null ],
      "return_taxes" : [ null, null ]
    } ],
    "customer_id" : "customer_id"
  }
}}]
     - parameter body: (body) An object containing the fields to POST for the request.

See the corresponding object definition for field details. 

     - returns: RequestBuilder<UpdateOrderResponse> 
     */
    open class func updateOrderWithRequestBuilder(body: UpdateOrderRequest) -> RequestBuilder<UpdateOrderResponse> {
        let path = "/v2/locations/{location_id}/orders/{order_id}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateOrderResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
